// Generated by jextract

package org.libtiff;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class tiffio_h extends tiffio_h_1 {

    tiffio_h() {
        // Should not be called directly
    }
    private static final int FILENAME_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FILENAME_MAX 1024
     * }
     */
    public static int FILENAME_MAX() {
        return FILENAME_MAX;
    }
    private static final int L_tmpnam = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define L_tmpnam 1024
     * }
     */
    public static int L_tmpnam() {
        return L_tmpnam;
    }
    private static final int TMP_MAX = (int)308915776L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 308915776
     * }
     */
    public static int TMP_MAX() {
        return TMP_MAX;
    }
    private static final int L_ctermid = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define L_ctermid 1024
     * }
     */
    public static int L_ctermid() {
        return L_ctermid;
    }
    private static final int _USE_FORTIFY_LEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _USE_FORTIFY_LEVEL 2
     * }
     */
    public static int _USE_FORTIFY_LEVEL() {
        return _USE_FORTIFY_LEVEL;
    }
    private static final int LOGLUV_PUBLIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LOGLUV_PUBLIC 1
     * }
     */
    public static int LOGLUV_PUBLIC() {
        return LOGLUV_PUBLIC;
    }
    private static final int FIELD_CUSTOM = (int)65L;
    /**
     * {@snippet lang=c :
     * #define FIELD_CUSTOM 65
     * }
     */
    public static int FIELD_CUSTOM() {
        return FIELD_CUSTOM;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = tiffio_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = tiffio_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = tiffio_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_nl_item
     * }
     */
    public static final OfInt __darwin_nl_item = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wctrans_t
     * }
     */
    public static final OfInt __darwin_wctrans_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_wctype_t
     * }
     */
    public static final OfInt __darwin_wctype_t = tiffio_h.C_INT;

    private static class imaxabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("imaxabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern intmax_t imaxabs(intmax_t j)
     * }
     */
    public static FunctionDescriptor imaxabs$descriptor() {
        return imaxabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern intmax_t imaxabs(intmax_t j)
     * }
     */
    public static MethodHandle imaxabs$handle() {
        return imaxabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern intmax_t imaxabs(intmax_t j)
     * }
     */
    public static MemorySegment imaxabs$address() {
        return imaxabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern intmax_t imaxabs(intmax_t j)
     * }
     */
    public static long imaxabs(long j) {
        var mh$ = imaxabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("imaxabs", j);
            }
            return (long)mh$.invokeExact(j);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class imaxdiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imaxdiv_t.layout(),
            tiffio_h.C_LONG,
            tiffio_h.C_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("imaxdiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)
     * }
     */
    public static FunctionDescriptor imaxdiv$descriptor() {
        return imaxdiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)
     * }
     */
    public static MethodHandle imaxdiv$handle() {
        return imaxdiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)
     * }
     */
    public static MemorySegment imaxdiv$address() {
        return imaxdiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)
     * }
     */
    public static MemorySegment imaxdiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = imaxdiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("imaxdiv", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoimax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("strtoimax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern intmax_t strtoimax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoimax$descriptor() {
        return strtoimax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern intmax_t strtoimax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoimax$handle() {
        return strtoimax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern intmax_t strtoimax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtoimax$address() {
        return strtoimax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern intmax_t strtoimax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoimax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoimax", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoumax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("strtoumax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uintmax_t strtoumax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoumax$descriptor() {
        return strtoumax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uintmax_t strtoumax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoumax$handle() {
        return strtoumax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uintmax_t strtoumax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment strtoumax$address() {
        return strtoumax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uintmax_t strtoumax(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoumax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoumax", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoimax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("wcstoimax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern intmax_t wcstoimax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor wcstoimax$descriptor() {
        return wcstoimax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern intmax_t wcstoimax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle wcstoimax$handle() {
        return wcstoimax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern intmax_t wcstoimax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment wcstoimax$address() {
        return wcstoimax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern intmax_t wcstoimax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static long wcstoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoimax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoimax", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoumax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("wcstoumax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uintmax_t wcstoumax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor wcstoumax$descriptor() {
        return wcstoumax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uintmax_t wcstoumax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle wcstoumax$handle() {
        return wcstoumax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uintmax_t wcstoumax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static MemorySegment wcstoumax$address() {
        return wcstoumax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uintmax_t wcstoumax(const wchar_t *restrict __nptr, wchar_t **restrict __endptr, int __base)
     * }
     */
    public static long wcstoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoumax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoumax", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int8_t int8
     * }
     */
    public static final OfByte int8 = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint8
     * }
     */
    public static final OfByte uint8 = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int16
     * }
     */
    public static final OfShort int16 = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint16
     * }
     */
    public static final OfShort uint16 = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int32
     * }
     */
    public static final OfInt int32 = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint32
     * }
     */
    public static final OfInt uint32 = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int64
     * }
     */
    public static final OfLong int64 = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint64
     * }
     */
    public static final OfLong uint64 = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int uint16_vap
     * }
     */
    public static final OfInt uint16_vap = tiffio_h.C_INT;
    private static final int TIFF_NOTYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_NOTYPE = 0
     * }
     */
    public static int TIFF_NOTYPE() {
        return TIFF_NOTYPE;
    }
    private static final int TIFF_BYTE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_BYTE = 1
     * }
     */
    public static int TIFF_BYTE() {
        return TIFF_BYTE;
    }
    private static final int TIFF_ASCII = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_ASCII = 2
     * }
     */
    public static int TIFF_ASCII() {
        return TIFF_ASCII;
    }
    private static final int TIFF_SHORT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_SHORT = 3
     * }
     */
    public static int TIFF_SHORT() {
        return TIFF_SHORT;
    }
    private static final int TIFF_LONG = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_LONG = 4
     * }
     */
    public static int TIFF_LONG() {
        return TIFF_LONG;
    }
    private static final int TIFF_RATIONAL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_RATIONAL = 5
     * }
     */
    public static int TIFF_RATIONAL() {
        return TIFF_RATIONAL;
    }
    private static final int TIFF_SBYTE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_SBYTE = 6
     * }
     */
    public static int TIFF_SBYTE() {
        return TIFF_SBYTE;
    }
    private static final int TIFF_UNDEFINED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_UNDEFINED = 7
     * }
     */
    public static int TIFF_UNDEFINED() {
        return TIFF_UNDEFINED;
    }
    private static final int TIFF_SSHORT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_SSHORT = 8
     * }
     */
    public static int TIFF_SSHORT() {
        return TIFF_SSHORT;
    }
    private static final int TIFF_SLONG = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_SLONG = 9
     * }
     */
    public static int TIFF_SLONG() {
        return TIFF_SLONG;
    }
    private static final int TIFF_SRATIONAL = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_SRATIONAL = 10
     * }
     */
    public static int TIFF_SRATIONAL() {
        return TIFF_SRATIONAL;
    }
    private static final int TIFF_FLOAT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_FLOAT = 11
     * }
     */
    public static int TIFF_FLOAT() {
        return TIFF_FLOAT;
    }
    private static final int TIFF_DOUBLE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_DOUBLE = 12
     * }
     */
    public static int TIFF_DOUBLE() {
        return TIFF_DOUBLE;
    }
    private static final int TIFF_IFD = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_IFD = 13
     * }
     */
    public static int TIFF_IFD() {
        return TIFF_IFD;
    }
    private static final int TIFF_LONG8 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_LONG8 = 16
     * }
     */
    public static int TIFF_LONG8() {
        return TIFF_LONG8;
    }
    private static final int TIFF_SLONG8 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_SLONG8 = 17
     * }
     */
    public static int TIFF_SLONG8() {
        return TIFF_SLONG8;
    }
    private static final int TIFF_IFD8 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TIFF_IFD8 = 18
     * }
     */
    public static int TIFF_IFD8() {
        return TIFF_IFD8;
    }
    /**
     * {@snippet lang=c :
     * typedef int64_t tmsize_t
     * }
     */
    public static final OfLong tmsize_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t toff_t
     * }
     */
    public static final OfLong toff_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t ttag_t
     * }
     */
    public static final OfInt ttag_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t tdir_t
     * }
     */
    public static final OfInt tdir_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t tsample_t
     * }
     */
    public static final OfShort tsample_t = tiffio_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t tstrile_t
     * }
     */
    public static final OfInt tstrile_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef tstrile_t tstrip_t
     * }
     */
    public static final OfInt tstrip_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef tstrile_t ttile_t
     * }
     */
    public static final OfInt ttile_t = tiffio_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef tmsize_t tsize_t
     * }
     */
    public static final OfLong tsize_t = tiffio_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef void *tdata_t
     * }
     */
    public static final AddressLayout tdata_t = tiffio_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *thandle_t
     * }
     */
    public static final AddressLayout thandle_t = tiffio_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char TIFFRGBValue
     * }
     */
    public static final OfByte TIFFRGBValue = tiffio_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list va_list
     * }
     */
    public static final AddressLayout va_list = tiffio_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __gnuc_va_list
     * }
     */
    public static final AddressLayout __gnuc_va_list = tiffio_h.C_POINTER;

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("renameat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() {
        return renameat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static MethodHandle renameat$handle() {
        return renameat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static MemorySegment renameat$address() {
        return renameat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static int renameat(int x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renamex_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("renamex_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static FunctionDescriptor renamex_np$descriptor() {
        return renamex_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static MethodHandle renamex_np$handle() {
        return renamex_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static MemorySegment renamex_np$address() {
        return renamex_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static int renamex_np(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = renamex_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renamex_np", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameatx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("renameatx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static FunctionDescriptor renameatx_np$descriptor() {
        return renameatx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static MethodHandle renameatx_np$handle() {
        return renameatx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static MemorySegment renameatx_np$address() {
        return renameatx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static int renameatx_np(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = renameatx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameatx_np", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_off_t fpos_t
     * }
     */
    public static final OfLong fpos_t = tiffio_h.C_LONG_LONG;

    private static class __stdinp$constants {
        public static final AddressLayout LAYOUT = tiffio_h.C_POINTER;
        public static final MemorySegment SEGMENT = tiffio_h.findOrThrow("__stdinp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static AddressLayout __stdinp$layout() {
        return __stdinp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static MemorySegment __stdinp$segment() {
        return __stdinp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static MemorySegment __stdinp() {
        return __stdinp$constants.SEGMENT.get(__stdinp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static void __stdinp(MemorySegment varValue) {
        __stdinp$constants.SEGMENT.set(__stdinp$constants.LAYOUT, 0L, varValue);
    }

    private static class __stdoutp$constants {
        public static final AddressLayout LAYOUT = tiffio_h.C_POINTER;
        public static final MemorySegment SEGMENT = tiffio_h.findOrThrow("__stdoutp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static AddressLayout __stdoutp$layout() {
        return __stdoutp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static MemorySegment __stdoutp$segment() {
        return __stdoutp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static MemorySegment __stdoutp() {
        return __stdoutp$constants.SEGMENT.get(__stdoutp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static void __stdoutp(MemorySegment varValue) {
        __stdoutp$constants.SEGMENT.set(__stdoutp$constants.LAYOUT, 0L, varValue);
    }

    private static class __stderrp$constants {
        public static final AddressLayout LAYOUT = tiffio_h.C_POINTER;
        public static final MemorySegment SEGMENT = tiffio_h.findOrThrow("__stderrp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static AddressLayout __stderrp$layout() {
        return __stderrp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static MemorySegment __stderrp$segment() {
        return __stderrp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static MemorySegment __stderrp() {
        return __stderrp$constants.SEGMENT.get(__stderrp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static void __stderrp(MemorySegment varValue) {
        __stderrp$constants.SEGMENT.set(__stderrp$constants.LAYOUT, 0L, varValue);
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static MemorySegment clearerr$address() {
        return clearerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static void clearerr(MemorySegment x0) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static MemorySegment fclose$address() {
        return fclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static int fclose(MemorySegment x0) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static MemorySegment feof$address() {
        return feof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static int feof(MemorySegment x0) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static MemorySegment ferror$address() {
        return ferror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static int ferror(MemorySegment x0) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static MemorySegment fflush$address() {
        return fflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static int fflush(MemorySegment x0) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static MemorySegment fgetc$address() {
        return fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static int fgetc(MemorySegment x0) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static MemorySegment fgetpos$address() {
        return fgetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static int fgetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static MemorySegment fgets$address() {
        return fgets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static MemorySegment fgets(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static MemorySegment fopen$address() {
        return fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __mode) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __mode);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fprintf(FILE *restrict, const char *restrict, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fprintf(FILE *restrict, const char *restrict, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static MemorySegment fputc$address() {
        return fputc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static int fputc(int x0, MemorySegment x1) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static MemorySegment fputs$address() {
        return fputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static int fputs(MemorySegment x0, MemorySegment x1) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG,
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread$address() {
        return fread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __nitems, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static MemorySegment freopen$address() {
        return freopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static MemorySegment freopen(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fscanf(FILE *restrict, const char *restrict, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fscanf(FILE *restrict, const char *restrict, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static MemorySegment fseek$address() {
        return fseek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static int fseek(MemorySegment x0, long x1, int x2) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static MemorySegment fsetpos$address() {
        return fsetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static int fsetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static MemorySegment ftell$address() {
        return ftell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static long ftell(MemorySegment x0) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG,
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fwrite$address() {
        return fwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __nitems, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static MemorySegment getc$address() {
        return getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static int getc(MemorySegment x0) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT    );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static MemorySegment getchar$address() {
        return getchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("gets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static FunctionDescriptor gets$descriptor() {
        return gets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MethodHandle gets$handle() {
        return gets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MemorySegment gets$address() {
        return gets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MemorySegment gets(MemorySegment x0) {
        var mh$ = gets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static void perror(MemorySegment x0) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int printf(const char *restrict, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int printf(const char *restrict, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", x0, x1);
                }
                return (int)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static MemorySegment putc$address() {
        return putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static int putc(int x0, MemorySegment x1) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static MemorySegment putchar$address() {
        return putchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static int putchar(int x0) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static MemorySegment puts$address() {
        return puts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static int puts(MemorySegment x0) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static MemorySegment remove$address() {
        return remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static int remove(MemorySegment x0) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static MemorySegment rename$address() {
        return rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static MemorySegment rewind$address() {
        return rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static void rewind(MemorySegment x0) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int scanf(const char *restrict, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int scanf(const char *restrict, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", x0, x1);
                }
                return (int)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static MemorySegment setbuf$address() {
        return setbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static void setbuf(MemorySegment x0, MemorySegment x1) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static MemorySegment setvbuf$address() {
        return setvbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static int setvbuf(MemorySegment x0, MemorySegment x1, int x2, long x3) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sprintf(char *restrict, const char *restrict, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sprintf(char *restrict, const char *restrict, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sscanf(const char *restrict, const char *restrict, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sscanf(const char *restrict, const char *restrict, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER    );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile$address() {
        return tmpfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MemorySegment tmpnam$address() {
        return tmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static MemorySegment ungetc$address() {
        return ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static int ungetc(int x0, MemorySegment x1) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vfprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vfprintf$descriptor() {
        return vfprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vfprintf$handle() {
        return vfprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vfprintf$address() {
        return vfprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static int vfprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vprintf$descriptor() {
        return vprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static MethodHandle vprintf$handle() {
        return vprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static MemorySegment vprintf$address() {
        return vprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static int vprintf(MemorySegment x0, MemorySegment x1) {
        var mh$ = vprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vprintf", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vsprintf$descriptor() {
        return vsprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vsprintf$handle() {
        return vsprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vsprintf$address() {
        return vsprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static int vsprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ctermid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() {
        return ctermid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MethodHandle ctermid$handle() {
        return ctermid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MemorySegment ctermid$address() {
        return ctermid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MemorySegment ctermid(MemorySegment x0) {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static MemorySegment fdopen$address() {
        return fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static MemorySegment fdopen(int x0, MemorySegment x1) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static MemorySegment fileno$address() {
        return fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static int fileno(MemorySegment x0) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() {
        return pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static MethodHandle pclose$handle() {
        return pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static MemorySegment pclose$address() {
        return pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static int pclose(MemorySegment x0) {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static FunctionDescriptor popen$descriptor() {
        return popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static MethodHandle popen$handle() {
        return popen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static MemorySegment popen$address() {
        return popen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static MemorySegment popen(MemorySegment x0, MemorySegment x1) {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __srget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("__srget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static FunctionDescriptor __srget$descriptor() {
        return __srget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static MethodHandle __srget$handle() {
        return __srget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static MemorySegment __srget$address() {
        return __srget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static int __srget(MemorySegment x0) {
        var mh$ = __srget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__srget", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __svfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("__svfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static FunctionDescriptor __svfscanf$descriptor() {
        return __svfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static MethodHandle __svfscanf$handle() {
        return __svfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static MemorySegment __svfscanf$address() {
        return __svfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static int __svfscanf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __svfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__svfscanf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __swbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("__swbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static FunctionDescriptor __swbuf$descriptor() {
        return __swbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static MethodHandle __swbuf$handle() {
        return __swbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static MemorySegment __swbuf$address() {
        return __swbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static int __swbuf(int x0, MemorySegment x1) {
        var mh$ = __swbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__swbuf", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("flockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() {
        return flockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static MethodHandle flockfile$handle() {
        return flockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static MemorySegment flockfile$address() {
        return flockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static void flockfile(MemorySegment x0) {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ftrylockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() {
        return ftrylockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static MethodHandle ftrylockfile$handle() {
        return ftrylockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static MemorySegment ftrylockfile$address() {
        return ftrylockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static int ftrylockfile(MemorySegment x0) {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("funlockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() {
        return funlockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static MethodHandle funlockfile$handle() {
        return funlockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static MemorySegment funlockfile$address() {
        return funlockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static void funlockfile(MemorySegment x0) {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() {
        return getc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static MethodHandle getc_unlocked$handle() {
        return getc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static MemorySegment getc_unlocked$address() {
        return getc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static int getc_unlocked(MemorySegment x0) {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT    );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() {
        return getchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static MethodHandle getchar_unlocked$handle() {
        return getchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static MemorySegment getchar_unlocked$address() {
        return getchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("putc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() {
        return putc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static MethodHandle putc_unlocked$handle() {
        return putc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static MemorySegment putc_unlocked$address() {
        return putc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static int putc_unlocked(int x0, MemorySegment x1) {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("putchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() {
        return putchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() {
        return putchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static MemorySegment putchar_unlocked$address() {
        return putchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static int putchar_unlocked(int x0) {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static MemorySegment getw$address() {
        return getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static int getw(MemorySegment x0) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static MemorySegment putw$address() {
        return putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static int putw(int x0, MemorySegment x1) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static MemorySegment tempnam$address() {
        return tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __prefix) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __prefix);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_off_t off_t
     * }
     */
    public static final OfLong off_t = tiffio_h.C_LONG_LONG;

    private static class fseeko {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fseeko");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() {
        return fseeko.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() {
        return fseeko.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static MemorySegment fseeko$address() {
        return fseeko.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __offset, int __whence) {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __offset, __whence);
            }
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ftello");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() {
        return ftello.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() {
        return ftello.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static MemorySegment ftello$address() {
        return ftello.ADDR;
    }

    /**
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int snprintf(char *restrict __str, size_t __size, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_LONG,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int snprintf(char *restrict __str, size_t __size, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __str, long __size, MemorySegment __format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __str, __size, __format, x3);
                }
                return (int)spreader.invokeExact(__str, __size, __format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vfscanf$descriptor() {
        return vfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vfscanf$handle() {
        return vfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vfscanf$address() {
        return vfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static int vfscanf(MemorySegment __stream, MemorySegment __format, MemorySegment x2) {
        var mh$ = vfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfscanf", __stream, __format, x2);
            }
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vscanf$descriptor() {
        return vscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vscanf$handle() {
        return vscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vscanf$address() {
        return vscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment x1) {
        var mh$ = vscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vscanf", __format, x1);
            }
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vsnprintf$descriptor() {
        return vsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vsnprintf$handle() {
        return vsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vsnprintf$address() {
        return vsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static int vsnprintf(MemorySegment __str, long __size, MemorySegment __format, MemorySegment x3) {
        var mh$ = vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsnprintf", __str, __size, __format, x3);
            }
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vsscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vsscanf$descriptor() {
        return vsscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vsscanf$handle() {
        return vsscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vsscanf$address() {
        return vsscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static int vsscanf(MemorySegment __str, MemorySegment __format, MemorySegment x2) {
        var mh$ = vsscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsscanf", __str, __format, x2);
            }
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = tiffio_h.C_LONG;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int dprintf(int, const char *restrict, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_INT,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int dprintf(int, const char *restrict, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vdprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vdprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vdprintf$descriptor() {
        return vdprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vdprintf$handle() {
        return vdprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vdprintf$address() {
        return vdprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static int vdprintf(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vdprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vdprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() {
        return getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() {
        return getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getdelim$address() {
        return getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __linep, MemorySegment __linecapp, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __linep, __linecapp, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("getline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() {
        return getline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() {
        return getline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getline$address() {
        return getline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __linep, MemorySegment __linecapp, MemorySegment __stream) {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __linep, __linecapp, __stream);
            }
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fmemopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() {
        return fmemopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MethodHandle fmemopen$handle() {
        return fmemopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MemorySegment fmemopen$address() {
        return fmemopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __buf, long __size, MemorySegment __mode) {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __buf, __size, __mode);
            }
            return (MemorySegment)mh$.invokeExact(__buf, __size, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("open_memstream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() {
        return open_memstream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MethodHandle open_memstream$handle() {
        return open_memstream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MemorySegment open_memstream$address() {
        return open_memstream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufp, MemorySegment __sizep) {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufp, __sizep);
            }
            return (MemorySegment)mh$.invokeExact(__bufp, __sizep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sys_nerr$constants {
        public static final OfInt LAYOUT = tiffio_h.C_INT;
        public static final MemorySegment SEGMENT = tiffio_h.findOrThrow("sys_nerr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static OfInt sys_nerr$layout() {
        return sys_nerr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static MemorySegment sys_nerr$segment() {
        return sys_nerr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static int sys_nerr() {
        return sys_nerr$constants.SEGMENT.get(sys_nerr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static void sys_nerr(int varValue) {
        sys_nerr$constants.SEGMENT.set(sys_nerr$constants.LAYOUT, 0L, varValue);
    }

    private static class sys_errlist$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(0, tiffio_h.C_POINTER);
        public static final MemorySegment SEGMENT = tiffio_h.findOrThrow("sys_errlist").reinterpret(LAYOUT.byteSize());
        public static final VarHandle HANDLE = LAYOUT.varHandle();

        public static final long[] DIMS = {  };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static SequenceLayout sys_errlist$layout() {
        return sys_errlist$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static long[] sys_errlist$dimensions() {
        return sys_errlist$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static MemorySegment sys_errlist() {
        return sys_errlist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static void sys_errlist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, sys_errlist$constants.SEGMENT, 0L, sys_errlist$constants.LAYOUT.byteSize());
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int asprintf(char **restrict, const char *restrict, ...)
     * }
     */
    public static class asprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int asprintf(char **restrict, const char *restrict, ...)
         * }
         */
        public static asprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("asprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class ctermid_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("ctermid_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static FunctionDescriptor ctermid_r$descriptor() {
        return ctermid_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MethodHandle ctermid_r$handle() {
        return ctermid_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MemorySegment ctermid_r$address() {
        return ctermid_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MemorySegment ctermid_r(MemorySegment x0) {
        var mh$ = ctermid_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid_r", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetln {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fgetln");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static FunctionDescriptor fgetln$descriptor() {
        return fgetln.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static MethodHandle fgetln$handle() {
        return fgetln.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static MemorySegment fgetln$address() {
        return fgetln.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static MemorySegment fgetln(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetln.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetln", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmtcheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fmtcheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static FunctionDescriptor fmtcheck$descriptor() {
        return fmtcheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MethodHandle fmtcheck$handle() {
        return fmtcheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MemorySegment fmtcheck$address() {
        return fmtcheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MemorySegment fmtcheck(MemorySegment x0, MemorySegment x1) {
        var mh$ = fmtcheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmtcheck", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fpurge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("fpurge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static FunctionDescriptor fpurge$descriptor() {
        return fpurge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static MethodHandle fpurge$handle() {
        return fpurge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static MemorySegment fpurge$address() {
        return fpurge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static int fpurge(MemorySegment x0) {
        var mh$ = fpurge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fpurge", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("setbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() {
        return setbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static MethodHandle setbuffer$handle() {
        return setbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static MemorySegment setbuffer$address() {
        return setbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static void setbuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("setlinebuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() {
        return setlinebuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static MethodHandle setlinebuf$handle() {
        return setlinebuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static MemorySegment setlinebuf$address() {
        return setlinebuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static int setlinebuf(MemorySegment x0) {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vasprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("vasprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vasprintf$descriptor() {
        return vasprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vasprintf$handle() {
        return vasprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vasprintf$address() {
        return vasprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static int vasprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vasprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vasprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("funopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static FunctionDescriptor funopen$descriptor() {
        return funopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MethodHandle funopen$handle() {
        return funopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MemorySegment funopen$address() {
        return funopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MemorySegment funopen(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = funopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funopen", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __sprintf_chk(char *restrict, int, size_t, const char *restrict, ...)
     * }
     */
    public static class __sprintf_chk {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_INT,
                tiffio_h.C_LONG,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("__sprintf_chk");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __sprintf_chk(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __sprintf_chk(char *restrict, int, size_t, const char *restrict, ...)
         * }
         */
        public static __sprintf_chk makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __sprintf_chk(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int x1, long x2, MemorySegment x3, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__sprintf_chk", x0, x1, x2, x3, x4);
                }
                return (int)spreader.invokeExact(x0, x1, x2, x3, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __snprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, ...)
     * }
     */
    public static class __snprintf_chk {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_LONG,
                tiffio_h.C_INT,
                tiffio_h.C_LONG,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("__snprintf_chk");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __snprintf_chk(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __snprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, ...)
         * }
         */
        public static __snprintf_chk makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __snprintf_chk(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__snprintf_chk", x0, x1, x2, x3, x4, x5);
                }
                return (int)spreader.invokeExact(x0, x1, x2, x3, x4, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class __vsprintf_chk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("__vsprintf_chk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor __vsprintf_chk$descriptor() {
        return __vsprintf_chk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MethodHandle __vsprintf_chk$handle() {
        return __vsprintf_chk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MemorySegment __vsprintf_chk$address() {
        return __vsprintf_chk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static int __vsprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = __vsprintf_chk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__vsprintf_chk", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __vsnprintf_chk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG,
            tiffio_h.C_INT,
            tiffio_h.C_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("__vsnprintf_chk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor __vsnprintf_chk$descriptor() {
        return __vsnprintf_chk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MethodHandle __vsnprintf_chk$handle() {
        return __vsnprintf_chk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MemorySegment __vsnprintf_chk$address() {
        return __vsnprintf_chk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static int __vsnprintf_chk(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = __vsnprintf_chk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__vsnprintf_chk", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER    );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *TIFFGetVersion()
     * }
     */
    public static FunctionDescriptor TIFFGetVersion$descriptor() {
        return TIFFGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *TIFFGetVersion()
     * }
     */
    public static MethodHandle TIFFGetVersion$handle() {
        return TIFFGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *TIFFGetVersion()
     * }
     */
    public static MemorySegment TIFFGetVersion$address() {
        return TIFFGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *TIFFGetVersion()
     * }
     */
    public static MemorySegment TIFFGetVersion() {
        var mh$ = TIFFGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetVersion");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFindCODEC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFindCODEC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const TIFFCodec *TIFFFindCODEC(uint16_t)
     * }
     */
    public static FunctionDescriptor TIFFFindCODEC$descriptor() {
        return TIFFFindCODEC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const TIFFCodec *TIFFFindCODEC(uint16_t)
     * }
     */
    public static MethodHandle TIFFFindCODEC$handle() {
        return TIFFFindCODEC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const TIFFCodec *TIFFFindCODEC(uint16_t)
     * }
     */
    public static MemorySegment TIFFFindCODEC$address() {
        return TIFFFindCODEC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const TIFFCodec *TIFFFindCODEC(uint16_t)
     * }
     */
    public static MemorySegment TIFFFindCODEC(short x0) {
        var mh$ = TIFFFindCODEC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFindCODEC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRegisterCODEC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_SHORT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRegisterCODEC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFRegisterCODEC(uint16_t, const char *, TIFFInitMethod)
     * }
     */
    public static FunctionDescriptor TIFFRegisterCODEC$descriptor() {
        return TIFFRegisterCODEC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFRegisterCODEC(uint16_t, const char *, TIFFInitMethod)
     * }
     */
    public static MethodHandle TIFFRegisterCODEC$handle() {
        return TIFFRegisterCODEC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFRegisterCODEC(uint16_t, const char *, TIFFInitMethod)
     * }
     */
    public static MemorySegment TIFFRegisterCODEC$address() {
        return TIFFRegisterCODEC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFRegisterCODEC(uint16_t, const char *, TIFFInitMethod)
     * }
     */
    public static MemorySegment TIFFRegisterCODEC(short x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = TIFFRegisterCODEC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRegisterCODEC", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFUnRegisterCODEC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFUnRegisterCODEC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFUnRegisterCODEC(TIFFCodec *)
     * }
     */
    public static FunctionDescriptor TIFFUnRegisterCODEC$descriptor() {
        return TIFFUnRegisterCODEC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFUnRegisterCODEC(TIFFCodec *)
     * }
     */
    public static MethodHandle TIFFUnRegisterCODEC$handle() {
        return TIFFUnRegisterCODEC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFUnRegisterCODEC(TIFFCodec *)
     * }
     */
    public static MemorySegment TIFFUnRegisterCODEC$address() {
        return TIFFUnRegisterCODEC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFUnRegisterCODEC(TIFFCodec *)
     * }
     */
    public static void TIFFUnRegisterCODEC(MemorySegment x0) {
        var mh$ = TIFFUnRegisterCODEC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFUnRegisterCODEC", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsCODECConfigured {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsCODECConfigured");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsCODECConfigured(uint16_t)
     * }
     */
    public static FunctionDescriptor TIFFIsCODECConfigured$descriptor() {
        return TIFFIsCODECConfigured.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsCODECConfigured(uint16_t)
     * }
     */
    public static MethodHandle TIFFIsCODECConfigured$handle() {
        return TIFFIsCODECConfigured.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsCODECConfigured(uint16_t)
     * }
     */
    public static MemorySegment TIFFIsCODECConfigured$address() {
        return TIFFIsCODECConfigured.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsCODECConfigured(uint16_t)
     * }
     */
    public static int TIFFIsCODECConfigured(short x0) {
        var mh$ = TIFFIsCODECConfigured.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsCODECConfigured", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetConfiguredCODECs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER    );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetConfiguredCODECs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFGetConfiguredCODECs()
     * }
     */
    public static FunctionDescriptor TIFFGetConfiguredCODECs$descriptor() {
        return TIFFGetConfiguredCODECs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFGetConfiguredCODECs()
     * }
     */
    public static MethodHandle TIFFGetConfiguredCODECs$handle() {
        return TIFFGetConfiguredCODECs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFGetConfiguredCODECs()
     * }
     */
    public static MemorySegment TIFFGetConfiguredCODECs$address() {
        return TIFFGetConfiguredCODECs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFCodec *TIFFGetConfiguredCODECs()
     * }
     */
    public static MemorySegment TIFFGetConfiguredCODECs() {
        var mh$ = TIFFGetConfiguredCODECs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetConfiguredCODECs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFmalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFmalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *_TIFFmalloc(tmsize_t s)
     * }
     */
    public static FunctionDescriptor _TIFFmalloc$descriptor() {
        return _TIFFmalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *_TIFFmalloc(tmsize_t s)
     * }
     */
    public static MethodHandle _TIFFmalloc$handle() {
        return _TIFFmalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *_TIFFmalloc(tmsize_t s)
     * }
     */
    public static MemorySegment _TIFFmalloc$address() {
        return _TIFFmalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *_TIFFmalloc(tmsize_t s)
     * }
     */
    public static MemorySegment _TIFFmalloc(long s) {
        var mh$ = _TIFFmalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFmalloc", s);
            }
            return (MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFcalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFcalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *_TIFFcalloc(tmsize_t nmemb, tmsize_t siz)
     * }
     */
    public static FunctionDescriptor _TIFFcalloc$descriptor() {
        return _TIFFcalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *_TIFFcalloc(tmsize_t nmemb, tmsize_t siz)
     * }
     */
    public static MethodHandle _TIFFcalloc$handle() {
        return _TIFFcalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *_TIFFcalloc(tmsize_t nmemb, tmsize_t siz)
     * }
     */
    public static MemorySegment _TIFFcalloc$address() {
        return _TIFFcalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *_TIFFcalloc(tmsize_t nmemb, tmsize_t siz)
     * }
     */
    public static MemorySegment _TIFFcalloc(long nmemb, long siz) {
        var mh$ = _TIFFcalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFcalloc", nmemb, siz);
            }
            return (MemorySegment)mh$.invokeExact(nmemb, siz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFrealloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFrealloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *_TIFFrealloc(void *p, tmsize_t s)
     * }
     */
    public static FunctionDescriptor _TIFFrealloc$descriptor() {
        return _TIFFrealloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *_TIFFrealloc(void *p, tmsize_t s)
     * }
     */
    public static MethodHandle _TIFFrealloc$handle() {
        return _TIFFrealloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *_TIFFrealloc(void *p, tmsize_t s)
     * }
     */
    public static MemorySegment _TIFFrealloc$address() {
        return _TIFFrealloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *_TIFFrealloc(void *p, tmsize_t s)
     * }
     */
    public static MemorySegment _TIFFrealloc(MemorySegment p, long s) {
        var mh$ = _TIFFrealloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFrealloc", p, s);
            }
            return (MemorySegment)mh$.invokeExact(p, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFmemset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFmemset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void _TIFFmemset(void *p, int v, tmsize_t c)
     * }
     */
    public static FunctionDescriptor _TIFFmemset$descriptor() {
        return _TIFFmemset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void _TIFFmemset(void *p, int v, tmsize_t c)
     * }
     */
    public static MethodHandle _TIFFmemset$handle() {
        return _TIFFmemset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void _TIFFmemset(void *p, int v, tmsize_t c)
     * }
     */
    public static MemorySegment _TIFFmemset$address() {
        return _TIFFmemset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void _TIFFmemset(void *p, int v, tmsize_t c)
     * }
     */
    public static void _TIFFmemset(MemorySegment p, int v, long c) {
        var mh$ = _TIFFmemset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFmemset", p, v, c);
            }
            mh$.invokeExact(p, v, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFmemcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFmemcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void _TIFFmemcpy(void *d, const void *s, tmsize_t c)
     * }
     */
    public static FunctionDescriptor _TIFFmemcpy$descriptor() {
        return _TIFFmemcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void _TIFFmemcpy(void *d, const void *s, tmsize_t c)
     * }
     */
    public static MethodHandle _TIFFmemcpy$handle() {
        return _TIFFmemcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void _TIFFmemcpy(void *d, const void *s, tmsize_t c)
     * }
     */
    public static MemorySegment _TIFFmemcpy$address() {
        return _TIFFmemcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void _TIFFmemcpy(void *d, const void *s, tmsize_t c)
     * }
     */
    public static void _TIFFmemcpy(MemorySegment d, MemorySegment s, long c) {
        var mh$ = _TIFFmemcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFmemcpy", d, s, c);
            }
            mh$.invokeExact(d, s, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFmemcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFmemcmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _TIFFmemcmp(const void *p1, const void *p2, tmsize_t c)
     * }
     */
    public static FunctionDescriptor _TIFFmemcmp$descriptor() {
        return _TIFFmemcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _TIFFmemcmp(const void *p1, const void *p2, tmsize_t c)
     * }
     */
    public static MethodHandle _TIFFmemcmp$handle() {
        return _TIFFmemcmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int _TIFFmemcmp(const void *p1, const void *p2, tmsize_t c)
     * }
     */
    public static MemorySegment _TIFFmemcmp$address() {
        return _TIFFmemcmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int _TIFFmemcmp(const void *p1, const void *p2, tmsize_t c)
     * }
     */
    public static int _TIFFmemcmp(MemorySegment p1, MemorySegment p2, long c) {
        var mh$ = _TIFFmemcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFmemcmp", p1, p2, c);
            }
            return (int)mh$.invokeExact(p1, p2, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _TIFFfree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("_TIFFfree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void _TIFFfree(void *p)
     * }
     */
    public static FunctionDescriptor _TIFFfree$descriptor() {
        return _TIFFfree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void _TIFFfree(void *p)
     * }
     */
    public static MethodHandle _TIFFfree$handle() {
        return _TIFFfree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void _TIFFfree(void *p)
     * }
     */
    public static MemorySegment _TIFFfree$address() {
        return _TIFFfree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void _TIFFfree(void *p)
     * }
     */
    public static void _TIFFfree(MemorySegment p) {
        var mh$ = _TIFFfree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_TIFFfree", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetTagListCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetTagListCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFGetTagListCount(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetTagListCount$descriptor() {
        return TIFFGetTagListCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFGetTagListCount(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetTagListCount$handle() {
        return TIFFGetTagListCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFGetTagListCount(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetTagListCount$address() {
        return TIFFGetTagListCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFGetTagListCount(TIFF *)
     * }
     */
    public static int TIFFGetTagListCount(MemorySegment x0) {
        var mh$ = TIFFGetTagListCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetTagListCount", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetTagListEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetTagListEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFGetTagListEntry(TIFF *, int tag_index)
     * }
     */
    public static FunctionDescriptor TIFFGetTagListEntry$descriptor() {
        return TIFFGetTagListEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFGetTagListEntry(TIFF *, int tag_index)
     * }
     */
    public static MethodHandle TIFFGetTagListEntry$handle() {
        return TIFFGetTagListEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFGetTagListEntry(TIFF *, int tag_index)
     * }
     */
    public static MemorySegment TIFFGetTagListEntry$address() {
        return TIFFGetTagListEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFGetTagListEntry(TIFF *, int tag_index)
     * }
     */
    public static int TIFFGetTagListEntry(MemorySegment x0, int tag_index) {
        var mh$ = TIFFGetTagListEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetTagListEntry", x0, tag_index);
            }
            return (int)mh$.invokeExact(x0, tag_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFindField {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFindField");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFindField(TIFF *, uint32_t, TIFFDataType)
     * }
     */
    public static FunctionDescriptor TIFFFindField$descriptor() {
        return TIFFFindField.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFindField(TIFF *, uint32_t, TIFFDataType)
     * }
     */
    public static MethodHandle TIFFFindField$handle() {
        return TIFFFindField.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFindField(TIFF *, uint32_t, TIFFDataType)
     * }
     */
    public static MemorySegment TIFFFindField$address() {
        return TIFFFindField.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFindField(TIFF *, uint32_t, TIFFDataType)
     * }
     */
    public static MemorySegment TIFFFindField(MemorySegment x0, int x1, int x2) {
        var mh$ = TIFFFindField.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFindField", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldWithTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldWithTag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithTag(TIFF *, uint32_t)
     * }
     */
    public static FunctionDescriptor TIFFFieldWithTag$descriptor() {
        return TIFFFieldWithTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithTag(TIFF *, uint32_t)
     * }
     */
    public static MethodHandle TIFFFieldWithTag$handle() {
        return TIFFFieldWithTag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithTag(TIFF *, uint32_t)
     * }
     */
    public static MemorySegment TIFFFieldWithTag$address() {
        return TIFFFieldWithTag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithTag(TIFF *, uint32_t)
     * }
     */
    public static MemorySegment TIFFFieldWithTag(MemorySegment x0, int x1) {
        var mh$ = TIFFFieldWithTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldWithTag", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldWithName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldWithName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithName(TIFF *, const char *)
     * }
     */
    public static FunctionDescriptor TIFFFieldWithName$descriptor() {
        return TIFFFieldWithName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithName(TIFF *, const char *)
     * }
     */
    public static MethodHandle TIFFFieldWithName$handle() {
        return TIFFFieldWithName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithName(TIFF *, const char *)
     * }
     */
    public static MemorySegment TIFFFieldWithName$address() {
        return TIFFFieldWithName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const TIFFField *TIFFFieldWithName(TIFF *, const char *)
     * }
     */
    public static MemorySegment TIFFFieldWithName(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFFieldWithName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldWithName", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldTag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldTag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFFieldTag(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldTag$descriptor() {
        return TIFFFieldTag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFFieldTag(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldTag$handle() {
        return TIFFFieldTag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFFieldTag(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldTag$address() {
        return TIFFFieldTag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFFieldTag(const TIFFField *)
     * }
     */
    public static int TIFFFieldTag(MemorySegment x0) {
        var mh$ = TIFFFieldTag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldTag", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *TIFFFieldName(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldName$descriptor() {
        return TIFFFieldName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *TIFFFieldName(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldName$handle() {
        return TIFFFieldName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *TIFFFieldName(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldName$address() {
        return TIFFFieldName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *TIFFFieldName(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldName(MemorySegment x0) {
        var mh$ = TIFFFieldName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldName", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldDataType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldDataType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFDataType TIFFFieldDataType(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldDataType$descriptor() {
        return TIFFFieldDataType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFDataType TIFFFieldDataType(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldDataType$handle() {
        return TIFFFieldDataType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFDataType TIFFFieldDataType(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldDataType$address() {
        return TIFFFieldDataType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFDataType TIFFFieldDataType(const TIFFField *)
     * }
     */
    public static int TIFFFieldDataType(MemorySegment x0) {
        var mh$ = TIFFFieldDataType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldDataType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldPassCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldPassCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFieldPassCount(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldPassCount$descriptor() {
        return TIFFFieldPassCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFieldPassCount(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldPassCount$handle() {
        return TIFFFieldPassCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFieldPassCount(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldPassCount$address() {
        return TIFFFieldPassCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFieldPassCount(const TIFFField *)
     * }
     */
    public static int TIFFFieldPassCount(MemorySegment x0) {
        var mh$ = TIFFFieldPassCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldPassCount", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldReadCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldReadCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFieldReadCount(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldReadCount$descriptor() {
        return TIFFFieldReadCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFieldReadCount(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldReadCount$handle() {
        return TIFFFieldReadCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFieldReadCount(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldReadCount$address() {
        return TIFFFieldReadCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFieldReadCount(const TIFFField *)
     * }
     */
    public static int TIFFFieldReadCount(MemorySegment x0) {
        var mh$ = TIFFFieldReadCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldReadCount", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldWriteCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldWriteCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFieldWriteCount(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldWriteCount$descriptor() {
        return TIFFFieldWriteCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFieldWriteCount(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldWriteCount$handle() {
        return TIFFFieldWriteCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFieldWriteCount(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldWriteCount$address() {
        return TIFFFieldWriteCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFieldWriteCount(const TIFFField *)
     * }
     */
    public static int TIFFFieldWriteCount(MemorySegment x0) {
        var mh$ = TIFFFieldWriteCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldWriteCount", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldSetGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldSetGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetSize(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldSetGetSize$descriptor() {
        return TIFFFieldSetGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetSize(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldSetGetSize$handle() {
        return TIFFFieldSetGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetSize(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldSetGetSize$address() {
        return TIFFFieldSetGetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetSize(const TIFFField *)
     * }
     */
    public static int TIFFFieldSetGetSize(MemorySegment x0) {
        var mh$ = TIFFFieldSetGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldSetGetSize", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldSetGetCountSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldSetGetCountSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetCountSize(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldSetGetCountSize$descriptor() {
        return TIFFFieldSetGetCountSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetCountSize(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldSetGetCountSize$handle() {
        return TIFFFieldSetGetCountSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetCountSize(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldSetGetCountSize$address() {
        return TIFFFieldSetGetCountSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFieldSetGetCountSize(const TIFFField *)
     * }
     */
    public static int TIFFFieldSetGetCountSize(MemorySegment x0) {
        var mh$ = TIFFFieldSetGetCountSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldSetGetCountSize", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFieldIsAnonymous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFieldIsAnonymous");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFieldIsAnonymous(const TIFFField *)
     * }
     */
    public static FunctionDescriptor TIFFFieldIsAnonymous$descriptor() {
        return TIFFFieldIsAnonymous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFieldIsAnonymous(const TIFFField *)
     * }
     */
    public static MethodHandle TIFFFieldIsAnonymous$handle() {
        return TIFFFieldIsAnonymous.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFieldIsAnonymous(const TIFFField *)
     * }
     */
    public static MemorySegment TIFFFieldIsAnonymous$address() {
        return TIFFFieldIsAnonymous.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFieldIsAnonymous(const TIFFField *)
     * }
     */
    public static int TIFFFieldIsAnonymous(MemorySegment x0) {
        var mh$ = TIFFFieldIsAnonymous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFieldIsAnonymous", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFAccessTagMethods {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFAccessTagMethods");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFTagMethods *TIFFAccessTagMethods(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFAccessTagMethods$descriptor() {
        return TIFFAccessTagMethods.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFTagMethods *TIFFAccessTagMethods(TIFF *)
     * }
     */
    public static MethodHandle TIFFAccessTagMethods$handle() {
        return TIFFAccessTagMethods.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFTagMethods *TIFFAccessTagMethods(TIFF *)
     * }
     */
    public static MemorySegment TIFFAccessTagMethods$address() {
        return TIFFAccessTagMethods.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFTagMethods *TIFFAccessTagMethods(TIFF *)
     * }
     */
    public static MemorySegment TIFFAccessTagMethods(MemorySegment x0) {
        var mh$ = TIFFAccessTagMethods.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFAccessTagMethods", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetClientInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetClientInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *TIFFGetClientInfo(TIFF *, const char *)
     * }
     */
    public static FunctionDescriptor TIFFGetClientInfo$descriptor() {
        return TIFFGetClientInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *TIFFGetClientInfo(TIFF *, const char *)
     * }
     */
    public static MethodHandle TIFFGetClientInfo$handle() {
        return TIFFGetClientInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *TIFFGetClientInfo(TIFF *, const char *)
     * }
     */
    public static MemorySegment TIFFGetClientInfo$address() {
        return TIFFGetClientInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *TIFFGetClientInfo(TIFF *, const char *)
     * }
     */
    public static MemorySegment TIFFGetClientInfo(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFGetClientInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetClientInfo", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetClientInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetClientInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSetClientInfo(TIFF *, void *, const char *)
     * }
     */
    public static FunctionDescriptor TIFFSetClientInfo$descriptor() {
        return TIFFSetClientInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSetClientInfo(TIFF *, void *, const char *)
     * }
     */
    public static MethodHandle TIFFSetClientInfo$handle() {
        return TIFFSetClientInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSetClientInfo(TIFF *, void *, const char *)
     * }
     */
    public static MemorySegment TIFFSetClientInfo$address() {
        return TIFFSetClientInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSetClientInfo(TIFF *, void *, const char *)
     * }
     */
    public static void TIFFSetClientInfo(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = TIFFSetClientInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetClientInfo", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFCleanup(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFCleanup$descriptor() {
        return TIFFCleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFCleanup(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFCleanup$handle() {
        return TIFFCleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFCleanup(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFCleanup$address() {
        return TIFFCleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFCleanup(TIFF *tif)
     * }
     */
    public static void TIFFCleanup(MemorySegment tif) {
        var mh$ = TIFFCleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCleanup", tif);
            }
            mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFClose(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFClose$descriptor() {
        return TIFFClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFClose(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFClose$handle() {
        return TIFFClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFClose(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFClose$address() {
        return TIFFClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFClose(TIFF *tif)
     * }
     */
    public static void TIFFClose(MemorySegment tif) {
        var mh$ = TIFFClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFClose", tif);
            }
            mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFlush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFlush(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFFlush$descriptor() {
        return TIFFFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFlush(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFFlush$handle() {
        return TIFFFlush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFlush(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFFlush$address() {
        return TIFFFlush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFlush(TIFF *tif)
     * }
     */
    public static int TIFFFlush(MemorySegment tif) {
        var mh$ = TIFFFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFlush", tif);
            }
            return (int)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFlushData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFlushData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFlushData(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFFlushData$descriptor() {
        return TIFFFlushData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFlushData(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFFlushData$handle() {
        return TIFFFlushData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFlushData(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFFlushData$address() {
        return TIFFFlushData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFlushData(TIFF *tif)
     * }
     */
    public static int TIFFFlushData(MemorySegment tif) {
        var mh$ = TIFFFlushData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFlushData", tif);
            }
            return (int)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int TIFFGetField(TIFF *tif, uint32_t tag, ...)
     * }
     */
    public static class TIFFGetField {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_INT
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetField");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFGetField(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int TIFFGetField(TIFF *tif, uint32_t tag, ...)
         * }
         */
        public static TIFFGetField makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFGetField(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment tif, int tag, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFGetField", tif, tag, x2);
                }
                return (int)spreader.invokeExact(tif, tag, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class TIFFVGetField {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVGetField");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFVGetField(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static FunctionDescriptor TIFFVGetField$descriptor() {
        return TIFFVGetField.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFVGetField(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static MethodHandle TIFFVGetField$handle() {
        return TIFFVGetField.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFVGetField(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static MemorySegment TIFFVGetField$address() {
        return TIFFVGetField.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFVGetField(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static int TIFFVGetField(MemorySegment tif, int tag, MemorySegment ap) {
        var mh$ = TIFFVGetField.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVGetField", tif, tag, ap);
            }
            return (int)mh$.invokeExact(tif, tag, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int TIFFGetFieldDefaulted(TIFF *tif, uint32_t tag, ...)
     * }
     */
    public static class TIFFGetFieldDefaulted {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_INT
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetFieldDefaulted");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFGetFieldDefaulted(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int TIFFGetFieldDefaulted(TIFF *tif, uint32_t tag, ...)
         * }
         */
        public static TIFFGetFieldDefaulted makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFGetFieldDefaulted(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment tif, int tag, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFGetFieldDefaulted", tif, tag, x2);
                }
                return (int)spreader.invokeExact(tif, tag, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class TIFFVGetFieldDefaulted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVGetFieldDefaulted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFVGetFieldDefaulted(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static FunctionDescriptor TIFFVGetFieldDefaulted$descriptor() {
        return TIFFVGetFieldDefaulted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFVGetFieldDefaulted(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static MethodHandle TIFFVGetFieldDefaulted$handle() {
        return TIFFVGetFieldDefaulted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFVGetFieldDefaulted(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static MemorySegment TIFFVGetFieldDefaulted$address() {
        return TIFFVGetFieldDefaulted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFVGetFieldDefaulted(TIFF *tif, uint32_t tag, va_list ap)
     * }
     */
    public static int TIFFVGetFieldDefaulted(MemorySegment tif, int tag, MemorySegment ap) {
        var mh$ = TIFFVGetFieldDefaulted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVGetFieldDefaulted", tif, tag, ap);
            }
            return (int)mh$.invokeExact(tif, tag, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadDirectory(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFReadDirectory$descriptor() {
        return TIFFReadDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadDirectory(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFReadDirectory$handle() {
        return TIFFReadDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadDirectory(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFReadDirectory$address() {
        return TIFFReadDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadDirectory(TIFF *tif)
     * }
     */
    public static int TIFFReadDirectory(MemorySegment tif) {
        var mh$ = TIFFReadDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadDirectory", tif);
            }
            return (int)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadCustomDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadCustomDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadCustomDirectory(TIFF *tif, toff_t diroff, const TIFFFieldArray *infoarray)
     * }
     */
    public static FunctionDescriptor TIFFReadCustomDirectory$descriptor() {
        return TIFFReadCustomDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadCustomDirectory(TIFF *tif, toff_t diroff, const TIFFFieldArray *infoarray)
     * }
     */
    public static MethodHandle TIFFReadCustomDirectory$handle() {
        return TIFFReadCustomDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadCustomDirectory(TIFF *tif, toff_t diroff, const TIFFFieldArray *infoarray)
     * }
     */
    public static MemorySegment TIFFReadCustomDirectory$address() {
        return TIFFReadCustomDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadCustomDirectory(TIFF *tif, toff_t diroff, const TIFFFieldArray *infoarray)
     * }
     */
    public static int TIFFReadCustomDirectory(MemorySegment tif, long diroff, MemorySegment infoarray) {
        var mh$ = TIFFReadCustomDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadCustomDirectory", tif, diroff, infoarray);
            }
            return (int)mh$.invokeExact(tif, diroff, infoarray);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadEXIFDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadEXIFDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadEXIFDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static FunctionDescriptor TIFFReadEXIFDirectory$descriptor() {
        return TIFFReadEXIFDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadEXIFDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static MethodHandle TIFFReadEXIFDirectory$handle() {
        return TIFFReadEXIFDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadEXIFDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static MemorySegment TIFFReadEXIFDirectory$address() {
        return TIFFReadEXIFDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadEXIFDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static int TIFFReadEXIFDirectory(MemorySegment tif, long diroff) {
        var mh$ = TIFFReadEXIFDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadEXIFDirectory", tif, diroff);
            }
            return (int)mh$.invokeExact(tif, diroff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadGPSDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadGPSDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadGPSDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static FunctionDescriptor TIFFReadGPSDirectory$descriptor() {
        return TIFFReadGPSDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadGPSDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static MethodHandle TIFFReadGPSDirectory$handle() {
        return TIFFReadGPSDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadGPSDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static MemorySegment TIFFReadGPSDirectory$address() {
        return TIFFReadGPSDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadGPSDirectory(TIFF *tif, toff_t diroff)
     * }
     */
    public static int TIFFReadGPSDirectory(MemorySegment tif, long diroff) {
        var mh$ = TIFFReadGPSDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadGPSDirectory", tif, diroff);
            }
            return (int)mh$.invokeExact(tif, diroff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFScanlineSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFScanlineSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFScanlineSize64(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFScanlineSize64$descriptor() {
        return TIFFScanlineSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFScanlineSize64(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFScanlineSize64$handle() {
        return TIFFScanlineSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFScanlineSize64(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFScanlineSize64$address() {
        return TIFFScanlineSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFScanlineSize64(TIFF *tif)
     * }
     */
    public static long TIFFScanlineSize64(MemorySegment tif) {
        var mh$ = TIFFScanlineSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFScanlineSize64", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFScanlineSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFScanlineSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFScanlineSize(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFScanlineSize$descriptor() {
        return TIFFScanlineSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFScanlineSize(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFScanlineSize$handle() {
        return TIFFScanlineSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFScanlineSize(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFScanlineSize$address() {
        return TIFFScanlineSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFScanlineSize(TIFF *tif)
     * }
     */
    public static long TIFFScanlineSize(MemorySegment tif) {
        var mh$ = TIFFScanlineSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFScanlineSize", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRasterScanlineSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRasterScanlineSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFRasterScanlineSize64(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFRasterScanlineSize64$descriptor() {
        return TIFFRasterScanlineSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFRasterScanlineSize64(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFRasterScanlineSize64$handle() {
        return TIFFRasterScanlineSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFRasterScanlineSize64(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFRasterScanlineSize64$address() {
        return TIFFRasterScanlineSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFRasterScanlineSize64(TIFF *tif)
     * }
     */
    public static long TIFFRasterScanlineSize64(MemorySegment tif) {
        var mh$ = TIFFRasterScanlineSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRasterScanlineSize64", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRasterScanlineSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRasterScanlineSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFRasterScanlineSize(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFRasterScanlineSize$descriptor() {
        return TIFFRasterScanlineSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFRasterScanlineSize(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFRasterScanlineSize$handle() {
        return TIFFRasterScanlineSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFRasterScanlineSize(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFRasterScanlineSize$address() {
        return TIFFRasterScanlineSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFRasterScanlineSize(TIFF *tif)
     * }
     */
    public static long TIFFRasterScanlineSize(MemorySegment tif) {
        var mh$ = TIFFRasterScanlineSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRasterScanlineSize", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFStripSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFStripSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFStripSize64(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFStripSize64$descriptor() {
        return TIFFStripSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFStripSize64(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFStripSize64$handle() {
        return TIFFStripSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFStripSize64(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFStripSize64$address() {
        return TIFFStripSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFStripSize64(TIFF *tif)
     * }
     */
    public static long TIFFStripSize64(MemorySegment tif) {
        var mh$ = TIFFStripSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFStripSize64", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFStripSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFStripSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFStripSize(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFStripSize$descriptor() {
        return TIFFStripSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFStripSize(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFStripSize$handle() {
        return TIFFStripSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFStripSize(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFStripSize$address() {
        return TIFFStripSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFStripSize(TIFF *tif)
     * }
     */
    public static long TIFFStripSize(MemorySegment tif) {
        var mh$ = TIFFStripSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFStripSize", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRawStripSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRawStripSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFRawStripSize64(TIFF *tif, uint32_t strip)
     * }
     */
    public static FunctionDescriptor TIFFRawStripSize64$descriptor() {
        return TIFFRawStripSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFRawStripSize64(TIFF *tif, uint32_t strip)
     * }
     */
    public static MethodHandle TIFFRawStripSize64$handle() {
        return TIFFRawStripSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFRawStripSize64(TIFF *tif, uint32_t strip)
     * }
     */
    public static MemorySegment TIFFRawStripSize64$address() {
        return TIFFRawStripSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFRawStripSize64(TIFF *tif, uint32_t strip)
     * }
     */
    public static long TIFFRawStripSize64(MemorySegment tif, int strip) {
        var mh$ = TIFFRawStripSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRawStripSize64", tif, strip);
            }
            return (long)mh$.invokeExact(tif, strip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRawStripSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRawStripSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFRawStripSize(TIFF *tif, uint32_t strip)
     * }
     */
    public static FunctionDescriptor TIFFRawStripSize$descriptor() {
        return TIFFRawStripSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFRawStripSize(TIFF *tif, uint32_t strip)
     * }
     */
    public static MethodHandle TIFFRawStripSize$handle() {
        return TIFFRawStripSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFRawStripSize(TIFF *tif, uint32_t strip)
     * }
     */
    public static MemorySegment TIFFRawStripSize$address() {
        return TIFFRawStripSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFRawStripSize(TIFF *tif, uint32_t strip)
     * }
     */
    public static long TIFFRawStripSize(MemorySegment tif, int strip) {
        var mh$ = TIFFRawStripSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRawStripSize", tif, strip);
            }
            return (long)mh$.invokeExact(tif, strip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFVStripSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVStripSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFVStripSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static FunctionDescriptor TIFFVStripSize64$descriptor() {
        return TIFFVStripSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFVStripSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MethodHandle TIFFVStripSize64$handle() {
        return TIFFVStripSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFVStripSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MemorySegment TIFFVStripSize64$address() {
        return TIFFVStripSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFVStripSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static long TIFFVStripSize64(MemorySegment tif, int nrows) {
        var mh$ = TIFFVStripSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVStripSize64", tif, nrows);
            }
            return (long)mh$.invokeExact(tif, nrows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFVStripSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVStripSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFVStripSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static FunctionDescriptor TIFFVStripSize$descriptor() {
        return TIFFVStripSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFVStripSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MethodHandle TIFFVStripSize$handle() {
        return TIFFVStripSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFVStripSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MemorySegment TIFFVStripSize$address() {
        return TIFFVStripSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFVStripSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static long TIFFVStripSize(MemorySegment tif, int nrows) {
        var mh$ = TIFFVStripSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVStripSize", tif, nrows);
            }
            return (long)mh$.invokeExact(tif, nrows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFTileRowSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFTileRowSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFTileRowSize64(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFTileRowSize64$descriptor() {
        return TIFFTileRowSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFTileRowSize64(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFTileRowSize64$handle() {
        return TIFFTileRowSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFTileRowSize64(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFTileRowSize64$address() {
        return TIFFTileRowSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFTileRowSize64(TIFF *tif)
     * }
     */
    public static long TIFFTileRowSize64(MemorySegment tif) {
        var mh$ = TIFFTileRowSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFTileRowSize64", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFTileRowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFTileRowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileRowSize(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFTileRowSize$descriptor() {
        return TIFFTileRowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileRowSize(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFTileRowSize$handle() {
        return TIFFTileRowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileRowSize(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFTileRowSize$address() {
        return TIFFTileRowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileRowSize(TIFF *tif)
     * }
     */
    public static long TIFFTileRowSize(MemorySegment tif) {
        var mh$ = TIFFTileRowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFTileRowSize", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFTileSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFTileSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFTileSize64(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFTileSize64$descriptor() {
        return TIFFTileSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFTileSize64(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFTileSize64$handle() {
        return TIFFTileSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFTileSize64(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFTileSize64$address() {
        return TIFFTileSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFTileSize64(TIFF *tif)
     * }
     */
    public static long TIFFTileSize64(MemorySegment tif) {
        var mh$ = TIFFTileSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFTileSize64", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFTileSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFTileSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileSize(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFTileSize$descriptor() {
        return TIFFTileSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileSize(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFTileSize$handle() {
        return TIFFTileSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileSize(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFTileSize$address() {
        return TIFFTileSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFTileSize(TIFF *tif)
     * }
     */
    public static long TIFFTileSize(MemorySegment tif) {
        var mh$ = TIFFTileSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFTileSize", tif);
            }
            return (long)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFVTileSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVTileSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFVTileSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static FunctionDescriptor TIFFVTileSize64$descriptor() {
        return TIFFVTileSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFVTileSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MethodHandle TIFFVTileSize64$handle() {
        return TIFFVTileSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFVTileSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MemorySegment TIFFVTileSize64$address() {
        return TIFFVTileSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFVTileSize64(TIFF *tif, uint32_t nrows)
     * }
     */
    public static long TIFFVTileSize64(MemorySegment tif, int nrows) {
        var mh$ = TIFFVTileSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVTileSize64", tif, nrows);
            }
            return (long)mh$.invokeExact(tif, nrows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFVTileSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVTileSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFVTileSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static FunctionDescriptor TIFFVTileSize$descriptor() {
        return TIFFVTileSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFVTileSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MethodHandle TIFFVTileSize$handle() {
        return TIFFVTileSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFVTileSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static MemorySegment TIFFVTileSize$address() {
        return TIFFVTileSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFVTileSize(TIFF *tif, uint32_t nrows)
     * }
     */
    public static long TIFFVTileSize(MemorySegment tif, int nrows) {
        var mh$ = TIFFVTileSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVTileSize", tif, nrows);
            }
            return (long)mh$.invokeExact(tif, nrows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFDefaultStripSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFDefaultStripSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFDefaultStripSize(TIFF *tif, uint32_t request)
     * }
     */
    public static FunctionDescriptor TIFFDefaultStripSize$descriptor() {
        return TIFFDefaultStripSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFDefaultStripSize(TIFF *tif, uint32_t request)
     * }
     */
    public static MethodHandle TIFFDefaultStripSize$handle() {
        return TIFFDefaultStripSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFDefaultStripSize(TIFF *tif, uint32_t request)
     * }
     */
    public static MemorySegment TIFFDefaultStripSize$address() {
        return TIFFDefaultStripSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFDefaultStripSize(TIFF *tif, uint32_t request)
     * }
     */
    public static int TIFFDefaultStripSize(MemorySegment tif, int request) {
        var mh$ = TIFFDefaultStripSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFDefaultStripSize", tif, request);
            }
            return (int)mh$.invokeExact(tif, request);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFDefaultTileSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFDefaultTileSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFDefaultTileSize(TIFF *, uint32_t *, uint32_t *)
     * }
     */
    public static FunctionDescriptor TIFFDefaultTileSize$descriptor() {
        return TIFFDefaultTileSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFDefaultTileSize(TIFF *, uint32_t *, uint32_t *)
     * }
     */
    public static MethodHandle TIFFDefaultTileSize$handle() {
        return TIFFDefaultTileSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFDefaultTileSize(TIFF *, uint32_t *, uint32_t *)
     * }
     */
    public static MemorySegment TIFFDefaultTileSize$address() {
        return TIFFDefaultTileSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFDefaultTileSize(TIFF *, uint32_t *, uint32_t *)
     * }
     */
    public static void TIFFDefaultTileSize(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = TIFFDefaultTileSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFDefaultTileSize", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFFileno(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFFileno$descriptor() {
        return TIFFFileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFFileno(TIFF *)
     * }
     */
    public static MethodHandle TIFFFileno$handle() {
        return TIFFFileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFFileno(TIFF *)
     * }
     */
    public static MemorySegment TIFFFileno$address() {
        return TIFFFileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFFileno(TIFF *)
     * }
     */
    public static int TIFFFileno(MemorySegment x0) {
        var mh$ = TIFFFileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFileno", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetFileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetFileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFSetFileno(TIFF *, int)
     * }
     */
    public static FunctionDescriptor TIFFSetFileno$descriptor() {
        return TIFFSetFileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFSetFileno(TIFF *, int)
     * }
     */
    public static MethodHandle TIFFSetFileno$handle() {
        return TIFFSetFileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFSetFileno(TIFF *, int)
     * }
     */
    public static MemorySegment TIFFSetFileno$address() {
        return TIFFSetFileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFSetFileno(TIFF *, int)
     * }
     */
    public static int TIFFSetFileno(MemorySegment x0, int x1) {
        var mh$ = TIFFSetFileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetFileno", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFClientdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFClientdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern thandle_t TIFFClientdata(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFClientdata$descriptor() {
        return TIFFClientdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern thandle_t TIFFClientdata(TIFF *)
     * }
     */
    public static MethodHandle TIFFClientdata$handle() {
        return TIFFClientdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern thandle_t TIFFClientdata(TIFF *)
     * }
     */
    public static MemorySegment TIFFClientdata$address() {
        return TIFFClientdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern thandle_t TIFFClientdata(TIFF *)
     * }
     */
    public static MemorySegment TIFFClientdata(MemorySegment x0) {
        var mh$ = TIFFClientdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFClientdata", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetClientdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetClientdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern thandle_t TIFFSetClientdata(TIFF *, thandle_t)
     * }
     */
    public static FunctionDescriptor TIFFSetClientdata$descriptor() {
        return TIFFSetClientdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern thandle_t TIFFSetClientdata(TIFF *, thandle_t)
     * }
     */
    public static MethodHandle TIFFSetClientdata$handle() {
        return TIFFSetClientdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern thandle_t TIFFSetClientdata(TIFF *, thandle_t)
     * }
     */
    public static MemorySegment TIFFSetClientdata$address() {
        return TIFFSetClientdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern thandle_t TIFFSetClientdata(TIFF *, thandle_t)
     * }
     */
    public static MemorySegment TIFFSetClientdata(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFSetClientdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetClientdata", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFGetMode(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetMode$descriptor() {
        return TIFFGetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFGetMode(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetMode$handle() {
        return TIFFGetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFGetMode(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetMode$address() {
        return TIFFGetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFGetMode(TIFF *)
     * }
     */
    public static int TIFFGetMode(MemorySegment x0) {
        var mh$ = TIFFGetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetMode", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFSetMode(TIFF *, int)
     * }
     */
    public static FunctionDescriptor TIFFSetMode$descriptor() {
        return TIFFSetMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFSetMode(TIFF *, int)
     * }
     */
    public static MethodHandle TIFFSetMode$handle() {
        return TIFFSetMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFSetMode(TIFF *, int)
     * }
     */
    public static MemorySegment TIFFSetMode$address() {
        return TIFFSetMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFSetMode(TIFF *, int)
     * }
     */
    public static int TIFFSetMode(MemorySegment x0, int x1) {
        var mh$ = TIFFSetMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetMode", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsTiled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsTiled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsTiled(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFIsTiled$descriptor() {
        return TIFFIsTiled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsTiled(TIFF *)
     * }
     */
    public static MethodHandle TIFFIsTiled$handle() {
        return TIFFIsTiled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsTiled(TIFF *)
     * }
     */
    public static MemorySegment TIFFIsTiled$address() {
        return TIFFIsTiled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsTiled(TIFF *)
     * }
     */
    public static int TIFFIsTiled(MemorySegment x0) {
        var mh$ = TIFFIsTiled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsTiled", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsByteSwapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsByteSwapped");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsByteSwapped(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFIsByteSwapped$descriptor() {
        return TIFFIsByteSwapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsByteSwapped(TIFF *)
     * }
     */
    public static MethodHandle TIFFIsByteSwapped$handle() {
        return TIFFIsByteSwapped.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsByteSwapped(TIFF *)
     * }
     */
    public static MemorySegment TIFFIsByteSwapped$address() {
        return TIFFIsByteSwapped.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsByteSwapped(TIFF *)
     * }
     */
    public static int TIFFIsByteSwapped(MemorySegment x0) {
        var mh$ = TIFFIsByteSwapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsByteSwapped", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsUpSampled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsUpSampled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsUpSampled(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFIsUpSampled$descriptor() {
        return TIFFIsUpSampled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsUpSampled(TIFF *)
     * }
     */
    public static MethodHandle TIFFIsUpSampled$handle() {
        return TIFFIsUpSampled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsUpSampled(TIFF *)
     * }
     */
    public static MemorySegment TIFFIsUpSampled$address() {
        return TIFFIsUpSampled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsUpSampled(TIFF *)
     * }
     */
    public static int TIFFIsUpSampled(MemorySegment x0) {
        var mh$ = TIFFIsUpSampled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsUpSampled", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsMSB2LSB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsMSB2LSB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsMSB2LSB(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFIsMSB2LSB$descriptor() {
        return TIFFIsMSB2LSB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsMSB2LSB(TIFF *)
     * }
     */
    public static MethodHandle TIFFIsMSB2LSB$handle() {
        return TIFFIsMSB2LSB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsMSB2LSB(TIFF *)
     * }
     */
    public static MemorySegment TIFFIsMSB2LSB$address() {
        return TIFFIsMSB2LSB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsMSB2LSB(TIFF *)
     * }
     */
    public static int TIFFIsMSB2LSB(MemorySegment x0) {
        var mh$ = TIFFIsMSB2LSB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsMSB2LSB", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsBigEndian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsBigEndian");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsBigEndian(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFIsBigEndian$descriptor() {
        return TIFFIsBigEndian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsBigEndian(TIFF *)
     * }
     */
    public static MethodHandle TIFFIsBigEndian$handle() {
        return TIFFIsBigEndian.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsBigEndian(TIFF *)
     * }
     */
    public static MemorySegment TIFFIsBigEndian$address() {
        return TIFFIsBigEndian.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsBigEndian(TIFF *)
     * }
     */
    public static int TIFFIsBigEndian(MemorySegment x0) {
        var mh$ = TIFFIsBigEndian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsBigEndian", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFIsBigTIFF {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFIsBigTIFF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFIsBigTIFF(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFIsBigTIFF$descriptor() {
        return TIFFIsBigTIFF.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFIsBigTIFF(TIFF *)
     * }
     */
    public static MethodHandle TIFFIsBigTIFF$handle() {
        return TIFFIsBigTIFF.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFIsBigTIFF(TIFF *)
     * }
     */
    public static MemorySegment TIFFIsBigTIFF$address() {
        return TIFFIsBigTIFF.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFIsBigTIFF(TIFF *)
     * }
     */
    public static int TIFFIsBigTIFF(MemorySegment x0) {
        var mh$ = TIFFIsBigTIFF.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFIsBigTIFF", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetReadProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetReadProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetReadProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetReadProc$descriptor() {
        return TIFFGetReadProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetReadProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetReadProc$handle() {
        return TIFFGetReadProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetReadProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetReadProc$address() {
        return TIFFGetReadProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetReadProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetReadProc(MemorySegment x0) {
        var mh$ = TIFFGetReadProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetReadProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetWriteProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetWriteProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetWriteProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetWriteProc$descriptor() {
        return TIFFGetWriteProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetWriteProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetWriteProc$handle() {
        return TIFFGetWriteProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetWriteProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetWriteProc$address() {
        return TIFFGetWriteProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFReadWriteProc TIFFGetWriteProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetWriteProc(MemorySegment x0) {
        var mh$ = TIFFGetWriteProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetWriteProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetSeekProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetSeekProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFSeekProc TIFFGetSeekProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetSeekProc$descriptor() {
        return TIFFGetSeekProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFSeekProc TIFFGetSeekProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetSeekProc$handle() {
        return TIFFGetSeekProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFSeekProc TIFFGetSeekProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetSeekProc$address() {
        return TIFFGetSeekProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFSeekProc TIFFGetSeekProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetSeekProc(MemorySegment x0) {
        var mh$ = TIFFGetSeekProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetSeekProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetCloseProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetCloseProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFCloseProc TIFFGetCloseProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetCloseProc$descriptor() {
        return TIFFGetCloseProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFCloseProc TIFFGetCloseProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetCloseProc$handle() {
        return TIFFGetCloseProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFCloseProc TIFFGetCloseProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetCloseProc$address() {
        return TIFFGetCloseProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFCloseProc TIFFGetCloseProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetCloseProc(MemorySegment x0) {
        var mh$ = TIFFGetCloseProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetCloseProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetSizeProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetSizeProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFSizeProc TIFFGetSizeProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetSizeProc$descriptor() {
        return TIFFGetSizeProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFSizeProc TIFFGetSizeProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetSizeProc$handle() {
        return TIFFGetSizeProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFSizeProc TIFFGetSizeProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetSizeProc$address() {
        return TIFFGetSizeProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFSizeProc TIFFGetSizeProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetSizeProc(MemorySegment x0) {
        var mh$ = TIFFGetSizeProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetSizeProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetMapFileProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetMapFileProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFMapFileProc TIFFGetMapFileProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetMapFileProc$descriptor() {
        return TIFFGetMapFileProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFMapFileProc TIFFGetMapFileProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetMapFileProc$handle() {
        return TIFFGetMapFileProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFMapFileProc TIFFGetMapFileProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetMapFileProc$address() {
        return TIFFGetMapFileProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFMapFileProc TIFFGetMapFileProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetMapFileProc(MemorySegment x0) {
        var mh$ = TIFFGetMapFileProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetMapFileProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetUnmapFileProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetUnmapFileProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFGetUnmapFileProc$descriptor() {
        return TIFFGetUnmapFileProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF *)
     * }
     */
    public static MethodHandle TIFFGetUnmapFileProc$handle() {
        return TIFFGetUnmapFileProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetUnmapFileProc$address() {
        return TIFFGetUnmapFileProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFUnmapFileProc TIFFGetUnmapFileProc(TIFF *)
     * }
     */
    public static MemorySegment TIFFGetUnmapFileProc(MemorySegment x0) {
        var mh$ = TIFFGetUnmapFileProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetUnmapFileProc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCurrentRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCurrentRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentRow(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCurrentRow$descriptor() {
        return TIFFCurrentRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentRow(TIFF *)
     * }
     */
    public static MethodHandle TIFFCurrentRow$handle() {
        return TIFFCurrentRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentRow(TIFF *)
     * }
     */
    public static MemorySegment TIFFCurrentRow$address() {
        return TIFFCurrentRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentRow(TIFF *)
     * }
     */
    public static int TIFFCurrentRow(MemorySegment x0) {
        var mh$ = TIFFCurrentRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCurrentRow", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCurrentDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCurrentDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tdir_t TIFFCurrentDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCurrentDirectory$descriptor() {
        return TIFFCurrentDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tdir_t TIFFCurrentDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFCurrentDirectory$handle() {
        return TIFFCurrentDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tdir_t TIFFCurrentDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFCurrentDirectory$address() {
        return TIFFCurrentDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tdir_t TIFFCurrentDirectory(TIFF *)
     * }
     */
    public static int TIFFCurrentDirectory(MemorySegment x0) {
        var mh$ = TIFFCurrentDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCurrentDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFNumberOfDirectories {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFNumberOfDirectories");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tdir_t TIFFNumberOfDirectories(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFNumberOfDirectories$descriptor() {
        return TIFFNumberOfDirectories.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tdir_t TIFFNumberOfDirectories(TIFF *)
     * }
     */
    public static MethodHandle TIFFNumberOfDirectories$handle() {
        return TIFFNumberOfDirectories.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tdir_t TIFFNumberOfDirectories(TIFF *)
     * }
     */
    public static MemorySegment TIFFNumberOfDirectories$address() {
        return TIFFNumberOfDirectories.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tdir_t TIFFNumberOfDirectories(TIFF *)
     * }
     */
    public static int TIFFNumberOfDirectories(MemorySegment x0) {
        var mh$ = TIFFNumberOfDirectories.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFNumberOfDirectories", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCurrentDirOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCurrentDirOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFCurrentDirOffset(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCurrentDirOffset$descriptor() {
        return TIFFCurrentDirOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFCurrentDirOffset(TIFF *)
     * }
     */
    public static MethodHandle TIFFCurrentDirOffset$handle() {
        return TIFFCurrentDirOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFCurrentDirOffset(TIFF *)
     * }
     */
    public static MemorySegment TIFFCurrentDirOffset$address() {
        return TIFFCurrentDirOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFCurrentDirOffset(TIFF *)
     * }
     */
    public static long TIFFCurrentDirOffset(MemorySegment x0) {
        var mh$ = TIFFCurrentDirOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCurrentDirOffset", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCurrentStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCurrentStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentStrip(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCurrentStrip$descriptor() {
        return TIFFCurrentStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentStrip(TIFF *)
     * }
     */
    public static MethodHandle TIFFCurrentStrip$handle() {
        return TIFFCurrentStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentStrip(TIFF *)
     * }
     */
    public static MemorySegment TIFFCurrentStrip$address() {
        return TIFFCurrentStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentStrip(TIFF *)
     * }
     */
    public static int TIFFCurrentStrip(MemorySegment x0) {
        var mh$ = TIFFCurrentStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCurrentStrip", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCurrentTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCurrentTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentTile(TIFF *tif)
     * }
     */
    public static FunctionDescriptor TIFFCurrentTile$descriptor() {
        return TIFFCurrentTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentTile(TIFF *tif)
     * }
     */
    public static MethodHandle TIFFCurrentTile$handle() {
        return TIFFCurrentTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentTile(TIFF *tif)
     * }
     */
    public static MemorySegment TIFFCurrentTile$address() {
        return TIFFCurrentTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFCurrentTile(TIFF *tif)
     * }
     */
    public static int TIFFCurrentTile(MemorySegment tif) {
        var mh$ = TIFFCurrentTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCurrentTile", tif);
            }
            return (int)mh$.invokeExact(tif);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadBufferSetup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadBufferSetup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static FunctionDescriptor TIFFReadBufferSetup$descriptor() {
        return TIFFReadBufferSetup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static MethodHandle TIFFReadBufferSetup$handle() {
        return TIFFReadBufferSetup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static MemorySegment TIFFReadBufferSetup$address() {
        return TIFFReadBufferSetup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static int TIFFReadBufferSetup(MemorySegment tif, MemorySegment bp, long size) {
        var mh$ = TIFFReadBufferSetup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadBufferSetup", tif, bp, size);
            }
            return (int)mh$.invokeExact(tif, bp, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteBufferSetup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteBufferSetup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFWriteBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static FunctionDescriptor TIFFWriteBufferSetup$descriptor() {
        return TIFFWriteBufferSetup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFWriteBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static MethodHandle TIFFWriteBufferSetup$handle() {
        return TIFFWriteBufferSetup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFWriteBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static MemorySegment TIFFWriteBufferSetup$address() {
        return TIFFWriteBufferSetup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFWriteBufferSetup(TIFF *tif, void *bp, tmsize_t size)
     * }
     */
    public static int TIFFWriteBufferSetup(MemorySegment tif, MemorySegment bp, long size) {
        var mh$ = TIFFWriteBufferSetup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteBufferSetup", tif, bp, size);
            }
            return (int)mh$.invokeExact(tif, bp, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetupStrips {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetupStrips");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFSetupStrips(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFSetupStrips$descriptor() {
        return TIFFSetupStrips.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFSetupStrips(TIFF *)
     * }
     */
    public static MethodHandle TIFFSetupStrips$handle() {
        return TIFFSetupStrips.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFSetupStrips(TIFF *)
     * }
     */
    public static MemorySegment TIFFSetupStrips$address() {
        return TIFFSetupStrips.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFSetupStrips(TIFF *)
     * }
     */
    public static int TIFFSetupStrips(MemorySegment x0) {
        var mh$ = TIFFSetupStrips.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetupStrips", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteCheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteCheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFWriteCheck(TIFF *, int, const char *)
     * }
     */
    public static FunctionDescriptor TIFFWriteCheck$descriptor() {
        return TIFFWriteCheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFWriteCheck(TIFF *, int, const char *)
     * }
     */
    public static MethodHandle TIFFWriteCheck$handle() {
        return TIFFWriteCheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFWriteCheck(TIFF *, int, const char *)
     * }
     */
    public static MemorySegment TIFFWriteCheck$address() {
        return TIFFWriteCheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFWriteCheck(TIFF *, int, const char *)
     * }
     */
    public static int TIFFWriteCheck(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = TIFFWriteCheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteCheck", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFreeDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFreeDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFFreeDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFFreeDirectory$descriptor() {
        return TIFFFreeDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFFreeDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFFreeDirectory$handle() {
        return TIFFFreeDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFFreeDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFFreeDirectory$address() {
        return TIFFFreeDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFFreeDirectory(TIFF *)
     * }
     */
    public static void TIFFFreeDirectory(MemorySegment x0) {
        var mh$ = TIFFFreeDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFreeDirectory", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCreateDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCreateDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCreateDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCreateDirectory$descriptor() {
        return TIFFCreateDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCreateDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFCreateDirectory$handle() {
        return TIFFCreateDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCreateDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFCreateDirectory$address() {
        return TIFFCreateDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCreateDirectory(TIFF *)
     * }
     */
    public static int TIFFCreateDirectory(MemorySegment x0) {
        var mh$ = TIFFCreateDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCreateDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCreateCustomDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCreateCustomDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCreateCustomDirectory(TIFF *, const TIFFFieldArray *)
     * }
     */
    public static FunctionDescriptor TIFFCreateCustomDirectory$descriptor() {
        return TIFFCreateCustomDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCreateCustomDirectory(TIFF *, const TIFFFieldArray *)
     * }
     */
    public static MethodHandle TIFFCreateCustomDirectory$handle() {
        return TIFFCreateCustomDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCreateCustomDirectory(TIFF *, const TIFFFieldArray *)
     * }
     */
    public static MemorySegment TIFFCreateCustomDirectory$address() {
        return TIFFCreateCustomDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCreateCustomDirectory(TIFF *, const TIFFFieldArray *)
     * }
     */
    public static int TIFFCreateCustomDirectory(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFCreateCustomDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCreateCustomDirectory", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCreateEXIFDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCreateEXIFDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCreateEXIFDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCreateEXIFDirectory$descriptor() {
        return TIFFCreateEXIFDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCreateEXIFDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFCreateEXIFDirectory$handle() {
        return TIFFCreateEXIFDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCreateEXIFDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFCreateEXIFDirectory$address() {
        return TIFFCreateEXIFDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCreateEXIFDirectory(TIFF *)
     * }
     */
    public static int TIFFCreateEXIFDirectory(MemorySegment x0) {
        var mh$ = TIFFCreateEXIFDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCreateEXIFDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCreateGPSDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCreateGPSDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCreateGPSDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCreateGPSDirectory$descriptor() {
        return TIFFCreateGPSDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCreateGPSDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFCreateGPSDirectory$handle() {
        return TIFFCreateGPSDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCreateGPSDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFCreateGPSDirectory$address() {
        return TIFFCreateGPSDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCreateGPSDirectory(TIFF *)
     * }
     */
    public static int TIFFCreateGPSDirectory(MemorySegment x0) {
        var mh$ = TIFFCreateGPSDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCreateGPSDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFLastDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFLastDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFLastDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFLastDirectory$descriptor() {
        return TIFFLastDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFLastDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFLastDirectory$handle() {
        return TIFFLastDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFLastDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFLastDirectory$address() {
        return TIFFLastDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFLastDirectory(TIFF *)
     * }
     */
    public static int TIFFLastDirectory(MemorySegment x0) {
        var mh$ = TIFFLastDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFLastDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFSetDirectory(TIFF *, tdir_t)
     * }
     */
    public static FunctionDescriptor TIFFSetDirectory$descriptor() {
        return TIFFSetDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFSetDirectory(TIFF *, tdir_t)
     * }
     */
    public static MethodHandle TIFFSetDirectory$handle() {
        return TIFFSetDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFSetDirectory(TIFF *, tdir_t)
     * }
     */
    public static MemorySegment TIFFSetDirectory$address() {
        return TIFFSetDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFSetDirectory(TIFF *, tdir_t)
     * }
     */
    public static int TIFFSetDirectory(MemorySegment x0, int x1) {
        var mh$ = TIFFSetDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetDirectory", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetSubDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetSubDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFSetSubDirectory(TIFF *, uint64_t)
     * }
     */
    public static FunctionDescriptor TIFFSetSubDirectory$descriptor() {
        return TIFFSetSubDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFSetSubDirectory(TIFF *, uint64_t)
     * }
     */
    public static MethodHandle TIFFSetSubDirectory$handle() {
        return TIFFSetSubDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFSetSubDirectory(TIFF *, uint64_t)
     * }
     */
    public static MemorySegment TIFFSetSubDirectory$address() {
        return TIFFSetSubDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFSetSubDirectory(TIFF *, uint64_t)
     * }
     */
    public static int TIFFSetSubDirectory(MemorySegment x0, long x1) {
        var mh$ = TIFFSetSubDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetSubDirectory", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFUnlinkDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFUnlinkDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFUnlinkDirectory(TIFF *, tdir_t)
     * }
     */
    public static FunctionDescriptor TIFFUnlinkDirectory$descriptor() {
        return TIFFUnlinkDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFUnlinkDirectory(TIFF *, tdir_t)
     * }
     */
    public static MethodHandle TIFFUnlinkDirectory$handle() {
        return TIFFUnlinkDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFUnlinkDirectory(TIFF *, tdir_t)
     * }
     */
    public static MemorySegment TIFFUnlinkDirectory$address() {
        return TIFFUnlinkDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFUnlinkDirectory(TIFF *, tdir_t)
     * }
     */
    public static int TIFFUnlinkDirectory(MemorySegment x0, int x1) {
        var mh$ = TIFFUnlinkDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFUnlinkDirectory", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int TIFFSetField(TIFF *, uint32_t, ...)
     * }
     */
    public static class TIFFSetField {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                tiffio_h.C_INT,
                tiffio_h.C_POINTER,
                tiffio_h.C_INT
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetField");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFSetField(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int TIFFSetField(TIFF *, uint32_t, ...)
         * }
         */
        public static TIFFSetField makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFSetField(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFSetField", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class TIFFVSetField {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFVSetField");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFVSetField(TIFF *, uint32_t, va_list)
     * }
     */
    public static FunctionDescriptor TIFFVSetField$descriptor() {
        return TIFFVSetField.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFVSetField(TIFF *, uint32_t, va_list)
     * }
     */
    public static MethodHandle TIFFVSetField$handle() {
        return TIFFVSetField.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFVSetField(TIFF *, uint32_t, va_list)
     * }
     */
    public static MemorySegment TIFFVSetField$address() {
        return TIFFVSetField.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFVSetField(TIFF *, uint32_t, va_list)
     * }
     */
    public static int TIFFVSetField(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = TIFFVSetField.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFVSetField", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFUnsetField {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFUnsetField");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFUnsetField(TIFF *, uint32_t)
     * }
     */
    public static FunctionDescriptor TIFFUnsetField$descriptor() {
        return TIFFUnsetField.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFUnsetField(TIFF *, uint32_t)
     * }
     */
    public static MethodHandle TIFFUnsetField$handle() {
        return TIFFUnsetField.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFUnsetField(TIFF *, uint32_t)
     * }
     */
    public static MemorySegment TIFFUnsetField$address() {
        return TIFFUnsetField.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFUnsetField(TIFF *, uint32_t)
     * }
     */
    public static int TIFFUnsetField(MemorySegment x0, int x1) {
        var mh$ = TIFFUnsetField.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFUnsetField", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFWriteDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFWriteDirectory$descriptor() {
        return TIFFWriteDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFWriteDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFWriteDirectory$handle() {
        return TIFFWriteDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFWriteDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFWriteDirectory$address() {
        return TIFFWriteDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFWriteDirectory(TIFF *)
     * }
     */
    public static int TIFFWriteDirectory(MemorySegment x0) {
        var mh$ = TIFFWriteDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteCustomDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteCustomDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFWriteCustomDirectory(TIFF *, uint64_t *)
     * }
     */
    public static FunctionDescriptor TIFFWriteCustomDirectory$descriptor() {
        return TIFFWriteCustomDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFWriteCustomDirectory(TIFF *, uint64_t *)
     * }
     */
    public static MethodHandle TIFFWriteCustomDirectory$handle() {
        return TIFFWriteCustomDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFWriteCustomDirectory(TIFF *, uint64_t *)
     * }
     */
    public static MemorySegment TIFFWriteCustomDirectory$address() {
        return TIFFWriteCustomDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFWriteCustomDirectory(TIFF *, uint64_t *)
     * }
     */
    public static int TIFFWriteCustomDirectory(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFWriteCustomDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteCustomDirectory", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCheckpointDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCheckpointDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCheckpointDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFCheckpointDirectory$descriptor() {
        return TIFFCheckpointDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCheckpointDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFCheckpointDirectory$handle() {
        return TIFFCheckpointDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCheckpointDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFCheckpointDirectory$address() {
        return TIFFCheckpointDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCheckpointDirectory(TIFF *)
     * }
     */
    public static int TIFFCheckpointDirectory(MemorySegment x0) {
        var mh$ = TIFFCheckpointDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCheckpointDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRewriteDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRewriteDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFRewriteDirectory(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFRewriteDirectory$descriptor() {
        return TIFFRewriteDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFRewriteDirectory(TIFF *)
     * }
     */
    public static MethodHandle TIFFRewriteDirectory$handle() {
        return TIFFRewriteDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFRewriteDirectory(TIFF *)
     * }
     */
    public static MemorySegment TIFFRewriteDirectory$address() {
        return TIFFRewriteDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFRewriteDirectory(TIFF *)
     * }
     */
    public static int TIFFRewriteDirectory(MemorySegment x0) {
        var mh$ = TIFFRewriteDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRewriteDirectory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFDeferStrileArrayWriting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFDeferStrileArrayWriting");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFDeferStrileArrayWriting(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFDeferStrileArrayWriting$descriptor() {
        return TIFFDeferStrileArrayWriting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFDeferStrileArrayWriting(TIFF *)
     * }
     */
    public static MethodHandle TIFFDeferStrileArrayWriting$handle() {
        return TIFFDeferStrileArrayWriting.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFDeferStrileArrayWriting(TIFF *)
     * }
     */
    public static MemorySegment TIFFDeferStrileArrayWriting$address() {
        return TIFFDeferStrileArrayWriting.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFDeferStrileArrayWriting(TIFF *)
     * }
     */
    public static int TIFFDeferStrileArrayWriting(MemorySegment x0) {
        var mh$ = TIFFDeferStrileArrayWriting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFDeferStrileArrayWriting", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFForceStrileArrayWriting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFForceStrileArrayWriting");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFForceStrileArrayWriting(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFForceStrileArrayWriting$descriptor() {
        return TIFFForceStrileArrayWriting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFForceStrileArrayWriting(TIFF *)
     * }
     */
    public static MethodHandle TIFFForceStrileArrayWriting$handle() {
        return TIFFForceStrileArrayWriting.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFForceStrileArrayWriting(TIFF *)
     * }
     */
    public static MemorySegment TIFFForceStrileArrayWriting$address() {
        return TIFFForceStrileArrayWriting.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFForceStrileArrayWriting(TIFF *)
     * }
     */
    public static int TIFFForceStrileArrayWriting(MemorySegment x0) {
        var mh$ = TIFFForceStrileArrayWriting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFForceStrileArrayWriting", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFPrintDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFPrintDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFPrintDirectory(TIFF *, FILE *, long)
     * }
     */
    public static FunctionDescriptor TIFFPrintDirectory$descriptor() {
        return TIFFPrintDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFPrintDirectory(TIFF *, FILE *, long)
     * }
     */
    public static MethodHandle TIFFPrintDirectory$handle() {
        return TIFFPrintDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFPrintDirectory(TIFF *, FILE *, long)
     * }
     */
    public static MemorySegment TIFFPrintDirectory$address() {
        return TIFFPrintDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFPrintDirectory(TIFF *, FILE *, long)
     * }
     */
    public static void TIFFPrintDirectory(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = TIFFPrintDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFPrintDirectory", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadScanline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadScanline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static FunctionDescriptor TIFFReadScanline$descriptor() {
        return TIFFReadScanline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static MethodHandle TIFFReadScanline$handle() {
        return TIFFReadScanline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static MemorySegment TIFFReadScanline$address() {
        return TIFFReadScanline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static int TIFFReadScanline(MemorySegment tif, MemorySegment buf, int row, short sample) {
        var mh$ = TIFFReadScanline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadScanline", tif, buf, row, sample);
            }
            return (int)mh$.invokeExact(tif, buf, row, sample);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteScanline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteScanline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFWriteScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static FunctionDescriptor TIFFWriteScanline$descriptor() {
        return TIFFWriteScanline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFWriteScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static MethodHandle TIFFWriteScanline$handle() {
        return TIFFWriteScanline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFWriteScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static MemorySegment TIFFWriteScanline$address() {
        return TIFFWriteScanline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFWriteScanline(TIFF *tif, void *buf, uint32_t row, uint16_t sample)
     * }
     */
    public static int TIFFWriteScanline(MemorySegment tif, MemorySegment buf, int row, short sample) {
        var mh$ = TIFFWriteScanline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteScanline", tif, buf, row, sample);
            }
            return (int)mh$.invokeExact(tif, buf, row, sample);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRGBAImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRGBAImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImage(TIFF *, uint32_t, uint32_t, uint32_t *, int)
     * }
     */
    public static FunctionDescriptor TIFFReadRGBAImage$descriptor() {
        return TIFFReadRGBAImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImage(TIFF *, uint32_t, uint32_t, uint32_t *, int)
     * }
     */
    public static MethodHandle TIFFReadRGBAImage$handle() {
        return TIFFReadRGBAImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImage(TIFF *, uint32_t, uint32_t, uint32_t *, int)
     * }
     */
    public static MemorySegment TIFFReadRGBAImage$address() {
        return TIFFReadRGBAImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImage(TIFF *, uint32_t, uint32_t, uint32_t *, int)
     * }
     */
    public static int TIFFReadRGBAImage(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = TIFFReadRGBAImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRGBAImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRGBAImageOriented {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRGBAImageOriented");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImageOriented(TIFF *, uint32_t, uint32_t, uint32_t *, int, int)
     * }
     */
    public static FunctionDescriptor TIFFReadRGBAImageOriented$descriptor() {
        return TIFFReadRGBAImageOriented.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImageOriented(TIFF *, uint32_t, uint32_t, uint32_t *, int, int)
     * }
     */
    public static MethodHandle TIFFReadRGBAImageOriented$handle() {
        return TIFFReadRGBAImageOriented.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImageOriented(TIFF *, uint32_t, uint32_t, uint32_t *, int, int)
     * }
     */
    public static MemorySegment TIFFReadRGBAImageOriented$address() {
        return TIFFReadRGBAImageOriented.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadRGBAImageOriented(TIFF *, uint32_t, uint32_t, uint32_t *, int, int)
     * }
     */
    public static int TIFFReadRGBAImageOriented(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4, int x5) {
        var mh$ = TIFFReadRGBAImageOriented.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRGBAImageOriented", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRGBAStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRGBAStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStrip(TIFF *, uint32_t, uint32_t *)
     * }
     */
    public static FunctionDescriptor TIFFReadRGBAStrip$descriptor() {
        return TIFFReadRGBAStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStrip(TIFF *, uint32_t, uint32_t *)
     * }
     */
    public static MethodHandle TIFFReadRGBAStrip$handle() {
        return TIFFReadRGBAStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStrip(TIFF *, uint32_t, uint32_t *)
     * }
     */
    public static MemorySegment TIFFReadRGBAStrip$address() {
        return TIFFReadRGBAStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStrip(TIFF *, uint32_t, uint32_t *)
     * }
     */
    public static int TIFFReadRGBAStrip(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = TIFFReadRGBAStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRGBAStrip", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRGBATile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRGBATile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBATile(TIFF *, uint32_t, uint32_t, uint32_t *)
     * }
     */
    public static FunctionDescriptor TIFFReadRGBATile$descriptor() {
        return TIFFReadRGBATile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBATile(TIFF *, uint32_t, uint32_t, uint32_t *)
     * }
     */
    public static MethodHandle TIFFReadRGBATile$handle() {
        return TIFFReadRGBATile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBATile(TIFF *, uint32_t, uint32_t, uint32_t *)
     * }
     */
    public static MemorySegment TIFFReadRGBATile$address() {
        return TIFFReadRGBATile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadRGBATile(TIFF *, uint32_t, uint32_t, uint32_t *)
     * }
     */
    public static int TIFFReadRGBATile(MemorySegment x0, int x1, int x2, MemorySegment x3) {
        var mh$ = TIFFReadRGBATile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRGBATile", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRGBAStripExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRGBAStripExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStripExt(TIFF *, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static FunctionDescriptor TIFFReadRGBAStripExt$descriptor() {
        return TIFFReadRGBAStripExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStripExt(TIFF *, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static MethodHandle TIFFReadRGBAStripExt$handle() {
        return TIFFReadRGBAStripExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStripExt(TIFF *, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static MemorySegment TIFFReadRGBAStripExt$address() {
        return TIFFReadRGBAStripExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadRGBAStripExt(TIFF *, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static int TIFFReadRGBAStripExt(MemorySegment x0, int x1, MemorySegment x2, int stop_on_error) {
        var mh$ = TIFFReadRGBAStripExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRGBAStripExt", x0, x1, x2, stop_on_error);
            }
            return (int)mh$.invokeExact(x0, x1, x2, stop_on_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRGBATileExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRGBATileExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBATileExt(TIFF *, uint32_t, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static FunctionDescriptor TIFFReadRGBATileExt$descriptor() {
        return TIFFReadRGBATileExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBATileExt(TIFF *, uint32_t, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static MethodHandle TIFFReadRGBATileExt$handle() {
        return TIFFReadRGBATileExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadRGBATileExt(TIFF *, uint32_t, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static MemorySegment TIFFReadRGBATileExt$address() {
        return TIFFReadRGBATileExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadRGBATileExt(TIFF *, uint32_t, uint32_t, uint32_t *, int stop_on_error)
     * }
     */
    public static int TIFFReadRGBATileExt(MemorySegment x0, int x1, int x2, MemorySegment x3, int stop_on_error) {
        var mh$ = TIFFReadRGBATileExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRGBATileExt", x0, x1, x2, x3, stop_on_error);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, stop_on_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRGBAImageOK {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRGBAImageOK");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageOK(TIFF *, char [1024])
     * }
     */
    public static FunctionDescriptor TIFFRGBAImageOK$descriptor() {
        return TIFFRGBAImageOK.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageOK(TIFF *, char [1024])
     * }
     */
    public static MethodHandle TIFFRGBAImageOK$handle() {
        return TIFFRGBAImageOK.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageOK(TIFF *, char [1024])
     * }
     */
    public static MemorySegment TIFFRGBAImageOK$address() {
        return TIFFRGBAImageOK.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFRGBAImageOK(TIFF *, char [1024])
     * }
     */
    public static int TIFFRGBAImageOK(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFRGBAImageOK.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRGBAImageOK", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRGBAImageBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRGBAImageBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageBegin(TIFFRGBAImage *, TIFF *, int, char [1024])
     * }
     */
    public static FunctionDescriptor TIFFRGBAImageBegin$descriptor() {
        return TIFFRGBAImageBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageBegin(TIFFRGBAImage *, TIFF *, int, char [1024])
     * }
     */
    public static MethodHandle TIFFRGBAImageBegin$handle() {
        return TIFFRGBAImageBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageBegin(TIFFRGBAImage *, TIFF *, int, char [1024])
     * }
     */
    public static MemorySegment TIFFRGBAImageBegin$address() {
        return TIFFRGBAImageBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFRGBAImageBegin(TIFFRGBAImage *, TIFF *, int, char [1024])
     * }
     */
    public static int TIFFRGBAImageBegin(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = TIFFRGBAImageBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRGBAImageBegin", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRGBAImageGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRGBAImageGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageGet(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static FunctionDescriptor TIFFRGBAImageGet$descriptor() {
        return TIFFRGBAImageGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageGet(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static MethodHandle TIFFRGBAImageGet$handle() {
        return TIFFRGBAImageGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFRGBAImageGet(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static MemorySegment TIFFRGBAImageGet$address() {
        return TIFFRGBAImageGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFRGBAImageGet(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static int TIFFRGBAImageGet(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = TIFFRGBAImageGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRGBAImageGet", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFRGBAImageEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFRGBAImageEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFRGBAImageEnd(TIFFRGBAImage *)
     * }
     */
    public static FunctionDescriptor TIFFRGBAImageEnd$descriptor() {
        return TIFFRGBAImageEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFRGBAImageEnd(TIFFRGBAImage *)
     * }
     */
    public static MethodHandle TIFFRGBAImageEnd$handle() {
        return TIFFRGBAImageEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFRGBAImageEnd(TIFFRGBAImage *)
     * }
     */
    public static MemorySegment TIFFRGBAImageEnd$address() {
        return TIFFRGBAImageEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFRGBAImageEnd(TIFFRGBAImage *)
     * }
     */
    public static void TIFFRGBAImageEnd(MemorySegment x0) {
        var mh$ = TIFFRGBAImageEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFRGBAImageEnd", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFileName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFileName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *TIFFFileName(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFFileName$descriptor() {
        return TIFFFileName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *TIFFFileName(TIFF *)
     * }
     */
    public static MethodHandle TIFFFileName$handle() {
        return TIFFFileName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *TIFFFileName(TIFF *)
     * }
     */
    public static MemorySegment TIFFFileName$address() {
        return TIFFFileName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *TIFFFileName(TIFF *)
     * }
     */
    public static MemorySegment TIFFFileName(MemorySegment x0) {
        var mh$ = TIFFFileName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFileName", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetFileName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetFileName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *TIFFSetFileName(TIFF *, const char *)
     * }
     */
    public static FunctionDescriptor TIFFSetFileName$descriptor() {
        return TIFFSetFileName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *TIFFSetFileName(TIFF *, const char *)
     * }
     */
    public static MethodHandle TIFFSetFileName$handle() {
        return TIFFSetFileName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *TIFFSetFileName(TIFF *, const char *)
     * }
     */
    public static MemorySegment TIFFSetFileName$address() {
        return TIFFSetFileName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *TIFFSetFileName(TIFF *, const char *)
     * }
     */
    public static MemorySegment TIFFSetFileName(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFSetFileName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetFileName", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void TIFFError(const char *, const char *, ...)
     * }
     */
    public static class TIFFError {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFError");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFError(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void TIFFError(const char *, const char *, ...)
         * }
         */
        public static TIFFError makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFError(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFError", x0, x1, x2);
                }
                spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void TIFFErrorExt(thandle_t, const char *, const char *, ...)
     * }
     */
    public static class TIFFErrorExt {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFErrorExt");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFErrorExt(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void TIFFErrorExt(thandle_t, const char *, const char *, ...)
         * }
         */
        public static TIFFErrorExt makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFErrorExt(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFErrorExt", x0, x1, x2, x3);
                }
                spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void TIFFWarning(const char *, const char *, ...)
     * }
     */
    public static class TIFFWarning {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWarning");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFWarning(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void TIFFWarning(const char *, const char *, ...)
         * }
         */
        public static TIFFWarning makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFWarning(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFWarning", x0, x1, x2);
                }
                spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void TIFFWarningExt(thandle_t, const char *, const char *, ...)
     * }
     */
    public static class TIFFWarningExt {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWarningExt");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFWarningExt(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void TIFFWarningExt(thandle_t, const char *, const char *, ...)
         * }
         */
        public static TIFFWarningExt makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFWarningExt(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFWarningExt", x0, x1, x2, x3);
                }
                spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class TIFFSetErrorHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetErrorHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetErrorHandler(TIFFErrorHandler)
     * }
     */
    public static FunctionDescriptor TIFFSetErrorHandler$descriptor() {
        return TIFFSetErrorHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetErrorHandler(TIFFErrorHandler)
     * }
     */
    public static MethodHandle TIFFSetErrorHandler$handle() {
        return TIFFSetErrorHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetErrorHandler(TIFFErrorHandler)
     * }
     */
    public static MemorySegment TIFFSetErrorHandler$address() {
        return TIFFSetErrorHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetErrorHandler(TIFFErrorHandler)
     * }
     */
    public static MemorySegment TIFFSetErrorHandler(MemorySegment x0) {
        var mh$ = TIFFSetErrorHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetErrorHandler", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetErrorHandlerExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetErrorHandlerExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetErrorHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static FunctionDescriptor TIFFSetErrorHandlerExt$descriptor() {
        return TIFFSetErrorHandlerExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetErrorHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static MethodHandle TIFFSetErrorHandlerExt$handle() {
        return TIFFSetErrorHandlerExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetErrorHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static MemorySegment TIFFSetErrorHandlerExt$address() {
        return TIFFSetErrorHandlerExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetErrorHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static MemorySegment TIFFSetErrorHandlerExt(MemorySegment x0) {
        var mh$ = TIFFSetErrorHandlerExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetErrorHandlerExt", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetWarningHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetWarningHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetWarningHandler(TIFFErrorHandler)
     * }
     */
    public static FunctionDescriptor TIFFSetWarningHandler$descriptor() {
        return TIFFSetWarningHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetWarningHandler(TIFFErrorHandler)
     * }
     */
    public static MethodHandle TIFFSetWarningHandler$handle() {
        return TIFFSetWarningHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetWarningHandler(TIFFErrorHandler)
     * }
     */
    public static MemorySegment TIFFSetWarningHandler$address() {
        return TIFFSetWarningHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFErrorHandler TIFFSetWarningHandler(TIFFErrorHandler)
     * }
     */
    public static MemorySegment TIFFSetWarningHandler(MemorySegment x0) {
        var mh$ = TIFFSetWarningHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetWarningHandler", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetWarningHandlerExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetWarningHandlerExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetWarningHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static FunctionDescriptor TIFFSetWarningHandlerExt$descriptor() {
        return TIFFSetWarningHandlerExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetWarningHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static MethodHandle TIFFSetWarningHandlerExt$handle() {
        return TIFFSetWarningHandlerExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetWarningHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static MemorySegment TIFFSetWarningHandlerExt$address() {
        return TIFFSetWarningHandlerExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFErrorHandlerExt TIFFSetWarningHandlerExt(TIFFErrorHandlerExt)
     * }
     */
    public static MemorySegment TIFFSetWarningHandlerExt(MemorySegment x0) {
        var mh$ = TIFFSetWarningHandlerExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetWarningHandlerExt", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void TIFFWarningExtR(TIFF *, const char *, const char *, ...)
     * }
     */
    public static class TIFFWarningExtR {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWarningExtR");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFWarningExtR(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void TIFFWarningExtR(TIFF *, const char *, const char *, ...)
         * }
         */
        public static TIFFWarningExtR makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFWarningExtR(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFWarningExtR", x0, x1, x2, x3);
                }
                spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void TIFFErrorExtR(TIFF *, const char *, const char *, ...)
     * }
     */
    public static class TIFFErrorExtR {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER,
                tiffio_h.C_POINTER
            );
        private static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFErrorExtR");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private TIFFErrorExtR(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void TIFFErrorExtR(TIFF *, const char *, const char *, ...)
         * }
         */
        public static TIFFErrorExtR makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new TIFFErrorExtR(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("TIFFErrorExtR", x0, x1, x2, x3);
                }
                spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class TIFFOpenOptionsAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER    );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpenOptionsAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFOpenOptions *TIFFOpenOptionsAlloc()
     * }
     */
    public static FunctionDescriptor TIFFOpenOptionsAlloc$descriptor() {
        return TIFFOpenOptionsAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFOpenOptions *TIFFOpenOptionsAlloc()
     * }
     */
    public static MethodHandle TIFFOpenOptionsAlloc$handle() {
        return TIFFOpenOptionsAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFOpenOptions *TIFFOpenOptionsAlloc()
     * }
     */
    public static MemorySegment TIFFOpenOptionsAlloc$address() {
        return TIFFOpenOptionsAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFOpenOptions *TIFFOpenOptionsAlloc()
     * }
     */
    public static MemorySegment TIFFOpenOptionsAlloc() {
        var mh$ = TIFFOpenOptionsAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpenOptionsAlloc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFOpenOptionsFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpenOptionsFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsFree(TIFFOpenOptions *)
     * }
     */
    public static FunctionDescriptor TIFFOpenOptionsFree$descriptor() {
        return TIFFOpenOptionsFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsFree(TIFFOpenOptions *)
     * }
     */
    public static MethodHandle TIFFOpenOptionsFree$handle() {
        return TIFFOpenOptionsFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsFree(TIFFOpenOptions *)
     * }
     */
    public static MemorySegment TIFFOpenOptionsFree$address() {
        return TIFFOpenOptionsFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsFree(TIFFOpenOptions *)
     * }
     */
    public static void TIFFOpenOptionsFree(MemorySegment x0) {
        var mh$ = TIFFOpenOptionsFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpenOptionsFree", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFOpenOptionsSetMaxSingleMemAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpenOptionsSetMaxSingleMemAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetMaxSingleMemAlloc(TIFFOpenOptions *opts, tmsize_t max_single_mem_alloc)
     * }
     */
    public static FunctionDescriptor TIFFOpenOptionsSetMaxSingleMemAlloc$descriptor() {
        return TIFFOpenOptionsSetMaxSingleMemAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetMaxSingleMemAlloc(TIFFOpenOptions *opts, tmsize_t max_single_mem_alloc)
     * }
     */
    public static MethodHandle TIFFOpenOptionsSetMaxSingleMemAlloc$handle() {
        return TIFFOpenOptionsSetMaxSingleMemAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetMaxSingleMemAlloc(TIFFOpenOptions *opts, tmsize_t max_single_mem_alloc)
     * }
     */
    public static MemorySegment TIFFOpenOptionsSetMaxSingleMemAlloc$address() {
        return TIFFOpenOptionsSetMaxSingleMemAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetMaxSingleMemAlloc(TIFFOpenOptions *opts, tmsize_t max_single_mem_alloc)
     * }
     */
    public static void TIFFOpenOptionsSetMaxSingleMemAlloc(MemorySegment opts, long max_single_mem_alloc) {
        var mh$ = TIFFOpenOptionsSetMaxSingleMemAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpenOptionsSetMaxSingleMemAlloc", opts, max_single_mem_alloc);
            }
            mh$.invokeExact(opts, max_single_mem_alloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFOpenOptionsSetErrorHandlerExtR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpenOptionsSetErrorHandlerExtR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetErrorHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *errorhandler_user_data)
     * }
     */
    public static FunctionDescriptor TIFFOpenOptionsSetErrorHandlerExtR$descriptor() {
        return TIFFOpenOptionsSetErrorHandlerExtR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetErrorHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *errorhandler_user_data)
     * }
     */
    public static MethodHandle TIFFOpenOptionsSetErrorHandlerExtR$handle() {
        return TIFFOpenOptionsSetErrorHandlerExtR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetErrorHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *errorhandler_user_data)
     * }
     */
    public static MemorySegment TIFFOpenOptionsSetErrorHandlerExtR$address() {
        return TIFFOpenOptionsSetErrorHandlerExtR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetErrorHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *errorhandler_user_data)
     * }
     */
    public static void TIFFOpenOptionsSetErrorHandlerExtR(MemorySegment opts, MemorySegment handler, MemorySegment errorhandler_user_data) {
        var mh$ = TIFFOpenOptionsSetErrorHandlerExtR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpenOptionsSetErrorHandlerExtR", opts, handler, errorhandler_user_data);
            }
            mh$.invokeExact(opts, handler, errorhandler_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFOpenOptionsSetWarningHandlerExtR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpenOptionsSetWarningHandlerExtR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetWarningHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *warnhandler_user_data)
     * }
     */
    public static FunctionDescriptor TIFFOpenOptionsSetWarningHandlerExtR$descriptor() {
        return TIFFOpenOptionsSetWarningHandlerExtR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetWarningHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *warnhandler_user_data)
     * }
     */
    public static MethodHandle TIFFOpenOptionsSetWarningHandlerExtR$handle() {
        return TIFFOpenOptionsSetWarningHandlerExtR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetWarningHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *warnhandler_user_data)
     * }
     */
    public static MemorySegment TIFFOpenOptionsSetWarningHandlerExtR$address() {
        return TIFFOpenOptionsSetWarningHandlerExtR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFOpenOptionsSetWarningHandlerExtR(TIFFOpenOptions *opts, TIFFErrorHandlerExtR handler, void *warnhandler_user_data)
     * }
     */
    public static void TIFFOpenOptionsSetWarningHandlerExtR(MemorySegment opts, MemorySegment handler, MemorySegment warnhandler_user_data) {
        var mh$ = TIFFOpenOptionsSetWarningHandlerExtR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpenOptionsSetWarningHandlerExtR", opts, handler, warnhandler_user_data);
            }
            mh$.invokeExact(opts, handler, warnhandler_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFF *TIFFOpen(const char *, const char *)
     * }
     */
    public static FunctionDescriptor TIFFOpen$descriptor() {
        return TIFFOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFF *TIFFOpen(const char *, const char *)
     * }
     */
    public static MethodHandle TIFFOpen$handle() {
        return TIFFOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFF *TIFFOpen(const char *, const char *)
     * }
     */
    public static MemorySegment TIFFOpen$address() {
        return TIFFOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFF *TIFFOpen(const char *, const char *)
     * }
     */
    public static MemorySegment TIFFOpen(MemorySegment x0, MemorySegment x1) {
        var mh$ = TIFFOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFOpenExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFOpenExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFF *TIFFOpenExt(const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static FunctionDescriptor TIFFOpenExt$descriptor() {
        return TIFFOpenExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFF *TIFFOpenExt(const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static MethodHandle TIFFOpenExt$handle() {
        return TIFFOpenExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFF *TIFFOpenExt(const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static MemorySegment TIFFOpenExt$address() {
        return TIFFOpenExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFF *TIFFOpenExt(const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static MemorySegment TIFFOpenExt(MemorySegment x0, MemorySegment x1, MemorySegment opts) {
        var mh$ = TIFFOpenExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFOpenExt", x0, x1, opts);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, opts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFdOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFdOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpen(int, const char *, const char *)
     * }
     */
    public static FunctionDescriptor TIFFFdOpen$descriptor() {
        return TIFFFdOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpen(int, const char *, const char *)
     * }
     */
    public static MethodHandle TIFFFdOpen$handle() {
        return TIFFFdOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpen(int, const char *, const char *)
     * }
     */
    public static MemorySegment TIFFFdOpen$address() {
        return TIFFFdOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpen(int, const char *, const char *)
     * }
     */
    public static MemorySegment TIFFFdOpen(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = TIFFFdOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFdOpen", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFFdOpenExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFFdOpenExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpenExt(int, const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static FunctionDescriptor TIFFFdOpenExt$descriptor() {
        return TIFFFdOpenExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpenExt(int, const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static MethodHandle TIFFFdOpenExt$handle() {
        return TIFFFdOpenExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpenExt(int, const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static MemorySegment TIFFFdOpenExt$address() {
        return TIFFFdOpenExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFF *TIFFFdOpenExt(int, const char *, const char *, TIFFOpenOptions *opts)
     * }
     */
    public static MemorySegment TIFFFdOpenExt(int x0, MemorySegment x1, MemorySegment x2, MemorySegment opts) {
        var mh$ = TIFFFdOpenExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFFdOpenExt", x0, x1, x2, opts);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, opts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFClientOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFClientOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpen(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc)
     * }
     */
    public static FunctionDescriptor TIFFClientOpen$descriptor() {
        return TIFFClientOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpen(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc)
     * }
     */
    public static MethodHandle TIFFClientOpen$handle() {
        return TIFFClientOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpen(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc)
     * }
     */
    public static MemorySegment TIFFClientOpen$address() {
        return TIFFClientOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpen(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc)
     * }
     */
    public static MemorySegment TIFFClientOpen(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8, MemorySegment x9) {
        var mh$ = TIFFClientOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFClientOpen", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFClientOpenExt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFClientOpenExt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpenExt(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc, TIFFOpenOptions *opts)
     * }
     */
    public static FunctionDescriptor TIFFClientOpenExt$descriptor() {
        return TIFFClientOpenExt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpenExt(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc, TIFFOpenOptions *opts)
     * }
     */
    public static MethodHandle TIFFClientOpenExt$handle() {
        return TIFFClientOpenExt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpenExt(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc, TIFFOpenOptions *opts)
     * }
     */
    public static MemorySegment TIFFClientOpenExt$address() {
        return TIFFClientOpenExt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFF *TIFFClientOpenExt(const char *, const char *, thandle_t, TIFFReadWriteProc, TIFFReadWriteProc, TIFFSeekProc, TIFFCloseProc, TIFFSizeProc, TIFFMapFileProc, TIFFUnmapFileProc, TIFFOpenOptions *opts)
     * }
     */
    public static MemorySegment TIFFClientOpenExt(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment opts) {
        var mh$ = TIFFClientOpenExt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFClientOpenExt", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, opts);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, opts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetTagExtender {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetTagExtender");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern TIFFExtendProc TIFFSetTagExtender(TIFFExtendProc)
     * }
     */
    public static FunctionDescriptor TIFFSetTagExtender$descriptor() {
        return TIFFSetTagExtender.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern TIFFExtendProc TIFFSetTagExtender(TIFFExtendProc)
     * }
     */
    public static MethodHandle TIFFSetTagExtender$handle() {
        return TIFFSetTagExtender.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern TIFFExtendProc TIFFSetTagExtender(TIFFExtendProc)
     * }
     */
    public static MemorySegment TIFFSetTagExtender$address() {
        return TIFFSetTagExtender.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern TIFFExtendProc TIFFSetTagExtender(TIFFExtendProc)
     * }
     */
    public static MemorySegment TIFFSetTagExtender(MemorySegment x0) {
        var mh$ = TIFFSetTagExtender.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetTagExtender", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFComputeTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFComputeTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static FunctionDescriptor TIFFComputeTile$descriptor() {
        return TIFFComputeTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MethodHandle TIFFComputeTile$handle() {
        return TIFFComputeTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MemorySegment TIFFComputeTile$address() {
        return TIFFComputeTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static int TIFFComputeTile(MemorySegment tif, int x, int y, int z, short s) {
        var mh$ = TIFFComputeTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFComputeTile", tif, x, y, z, s);
            }
            return (int)mh$.invokeExact(tif, x, y, z, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCheckTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCheckTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCheckTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static FunctionDescriptor TIFFCheckTile$descriptor() {
        return TIFFCheckTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCheckTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MethodHandle TIFFCheckTile$handle() {
        return TIFFCheckTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCheckTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MemorySegment TIFFCheckTile$address() {
        return TIFFCheckTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCheckTile(TIFF *tif, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static int TIFFCheckTile(MemorySegment tif, int x, int y, int z, short s) {
        var mh$ = TIFFCheckTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCheckTile", tif, x, y, z, s);
            }
            return (int)mh$.invokeExact(tif, x, y, z, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFNumberOfTiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFNumberOfTiles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfTiles(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFNumberOfTiles$descriptor() {
        return TIFFNumberOfTiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfTiles(TIFF *)
     * }
     */
    public static MethodHandle TIFFNumberOfTiles$handle() {
        return TIFFNumberOfTiles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfTiles(TIFF *)
     * }
     */
    public static MemorySegment TIFFNumberOfTiles$address() {
        return TIFFNumberOfTiles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfTiles(TIFF *)
     * }
     */
    public static int TIFFNumberOfTiles(MemorySegment x0) {
        var mh$ = TIFFNumberOfTiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFNumberOfTiles", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static FunctionDescriptor TIFFReadTile$descriptor() {
        return TIFFReadTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MethodHandle TIFFReadTile$handle() {
        return TIFFReadTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MemorySegment TIFFReadTile$address() {
        return TIFFReadTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static long TIFFReadTile(MemorySegment tif, MemorySegment buf, int x, int y, int z, short s) {
        var mh$ = TIFFReadTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadTile", tif, buf, x, y, z, s);
            }
            return (long)mh$.invokeExact(tif, buf, x, y, z, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static FunctionDescriptor TIFFWriteTile$descriptor() {
        return TIFFWriteTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MethodHandle TIFFWriteTile$handle() {
        return TIFFWriteTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static MemorySegment TIFFWriteTile$address() {
        return TIFFWriteTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteTile(TIFF *tif, void *buf, uint32_t x, uint32_t y, uint32_t z, uint16_t s)
     * }
     */
    public static long TIFFWriteTile(MemorySegment tif, MemorySegment buf, int x, int y, int z, short s) {
        var mh$ = TIFFWriteTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteTile", tif, buf, x, y, z, s);
            }
            return (long)mh$.invokeExact(tif, buf, x, y, z, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFComputeStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_SHORT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFComputeStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeStrip(TIFF *, uint32_t, uint16_t)
     * }
     */
    public static FunctionDescriptor TIFFComputeStrip$descriptor() {
        return TIFFComputeStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeStrip(TIFF *, uint32_t, uint16_t)
     * }
     */
    public static MethodHandle TIFFComputeStrip$handle() {
        return TIFFComputeStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeStrip(TIFF *, uint32_t, uint16_t)
     * }
     */
    public static MemorySegment TIFFComputeStrip$address() {
        return TIFFComputeStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFComputeStrip(TIFF *, uint32_t, uint16_t)
     * }
     */
    public static int TIFFComputeStrip(MemorySegment x0, int x1, short x2) {
        var mh$ = TIFFComputeStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFComputeStrip", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFNumberOfStrips {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFNumberOfStrips");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfStrips(TIFF *)
     * }
     */
    public static FunctionDescriptor TIFFNumberOfStrips$descriptor() {
        return TIFFNumberOfStrips.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfStrips(TIFF *)
     * }
     */
    public static MethodHandle TIFFNumberOfStrips$handle() {
        return TIFFNumberOfStrips.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfStrips(TIFF *)
     * }
     */
    public static MemorySegment TIFFNumberOfStrips$address() {
        return TIFFNumberOfStrips.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t TIFFNumberOfStrips(TIFF *)
     * }
     */
    public static int TIFFNumberOfStrips(MemorySegment x0) {
        var mh$ = TIFFNumberOfStrips.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFNumberOfStrips", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadEncodedStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadEncodedStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static FunctionDescriptor TIFFReadEncodedStrip$descriptor() {
        return TIFFReadEncodedStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static MethodHandle TIFFReadEncodedStrip$handle() {
        return TIFFReadEncodedStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static MemorySegment TIFFReadEncodedStrip$address() {
        return TIFFReadEncodedStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static long TIFFReadEncodedStrip(MemorySegment tif, int strip, MemorySegment buf, long size) {
        var mh$ = TIFFReadEncodedStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadEncodedStrip", tif, strip, buf, size);
            }
            return (long)mh$.invokeExact(tif, strip, buf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRawStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRawStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static FunctionDescriptor TIFFReadRawStrip$descriptor() {
        return TIFFReadRawStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static MethodHandle TIFFReadRawStrip$handle() {
        return TIFFReadRawStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static MemorySegment TIFFReadRawStrip$address() {
        return TIFFReadRawStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawStrip(TIFF *tif, uint32_t strip, void *buf, tmsize_t size)
     * }
     */
    public static long TIFFReadRawStrip(MemorySegment tif, int strip, MemorySegment buf, long size) {
        var mh$ = TIFFReadRawStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRawStrip", tif, strip, buf, size);
            }
            return (long)mh$.invokeExact(tif, strip, buf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadEncodedTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadEncodedTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static FunctionDescriptor TIFFReadEncodedTile$descriptor() {
        return TIFFReadEncodedTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static MethodHandle TIFFReadEncodedTile$handle() {
        return TIFFReadEncodedTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static MemorySegment TIFFReadEncodedTile$address() {
        return TIFFReadEncodedTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadEncodedTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static long TIFFReadEncodedTile(MemorySegment tif, int tile, MemorySegment buf, long size) {
        var mh$ = TIFFReadEncodedTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadEncodedTile", tif, tile, buf, size);
            }
            return (long)mh$.invokeExact(tif, tile, buf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadRawTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadRawTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static FunctionDescriptor TIFFReadRawTile$descriptor() {
        return TIFFReadRawTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static MethodHandle TIFFReadRawTile$handle() {
        return TIFFReadRawTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static MemorySegment TIFFReadRawTile$address() {
        return TIFFReadRawTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFReadRawTile(TIFF *tif, uint32_t tile, void *buf, tmsize_t size)
     * }
     */
    public static long TIFFReadRawTile(MemorySegment tif, int tile, MemorySegment buf, long size) {
        var mh$ = TIFFReadRawTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadRawTile", tif, tile, buf, size);
            }
            return (long)mh$.invokeExact(tif, tile, buf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReadFromUserBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReadFromUserBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFReadFromUserBuffer(TIFF *tif, uint32_t strile, void *inbuf, tmsize_t insize, void *outbuf, tmsize_t outsize)
     * }
     */
    public static FunctionDescriptor TIFFReadFromUserBuffer$descriptor() {
        return TIFFReadFromUserBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFReadFromUserBuffer(TIFF *tif, uint32_t strile, void *inbuf, tmsize_t insize, void *outbuf, tmsize_t outsize)
     * }
     */
    public static MethodHandle TIFFReadFromUserBuffer$handle() {
        return TIFFReadFromUserBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFReadFromUserBuffer(TIFF *tif, uint32_t strile, void *inbuf, tmsize_t insize, void *outbuf, tmsize_t outsize)
     * }
     */
    public static MemorySegment TIFFReadFromUserBuffer$address() {
        return TIFFReadFromUserBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFReadFromUserBuffer(TIFF *tif, uint32_t strile, void *inbuf, tmsize_t insize, void *outbuf, tmsize_t outsize)
     * }
     */
    public static int TIFFReadFromUserBuffer(MemorySegment tif, int strile, MemorySegment inbuf, long insize, MemorySegment outbuf, long outsize) {
        var mh$ = TIFFReadFromUserBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReadFromUserBuffer", tif, strile, inbuf, insize, outbuf, outsize);
            }
            return (int)mh$.invokeExact(tif, strile, inbuf, insize, outbuf, outsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteEncodedStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteEncodedStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static FunctionDescriptor TIFFWriteEncodedStrip$descriptor() {
        return TIFFWriteEncodedStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static MethodHandle TIFFWriteEncodedStrip$handle() {
        return TIFFWriteEncodedStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static MemorySegment TIFFWriteEncodedStrip$address() {
        return TIFFWriteEncodedStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static long TIFFWriteEncodedStrip(MemorySegment tif, int strip, MemorySegment data, long cc) {
        var mh$ = TIFFWriteEncodedStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteEncodedStrip", tif, strip, data, cc);
            }
            return (long)mh$.invokeExact(tif, strip, data, cc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteRawStrip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteRawStrip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static FunctionDescriptor TIFFWriteRawStrip$descriptor() {
        return TIFFWriteRawStrip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static MethodHandle TIFFWriteRawStrip$handle() {
        return TIFFWriteRawStrip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static MemorySegment TIFFWriteRawStrip$address() {
        return TIFFWriteRawStrip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawStrip(TIFF *tif, uint32_t strip, void *data, tmsize_t cc)
     * }
     */
    public static long TIFFWriteRawStrip(MemorySegment tif, int strip, MemorySegment data, long cc) {
        var mh$ = TIFFWriteRawStrip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteRawStrip", tif, strip, data, cc);
            }
            return (long)mh$.invokeExact(tif, strip, data, cc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteEncodedTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteEncodedTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static FunctionDescriptor TIFFWriteEncodedTile$descriptor() {
        return TIFFWriteEncodedTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static MethodHandle TIFFWriteEncodedTile$handle() {
        return TIFFWriteEncodedTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static MemorySegment TIFFWriteEncodedTile$address() {
        return TIFFWriteEncodedTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteEncodedTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static long TIFFWriteEncodedTile(MemorySegment tif, int tile, MemorySegment data, long cc) {
        var mh$ = TIFFWriteEncodedTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteEncodedTile", tif, tile, data, cc);
            }
            return (long)mh$.invokeExact(tif, tile, data, cc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFWriteRawTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFWriteRawTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static FunctionDescriptor TIFFWriteRawTile$descriptor() {
        return TIFFWriteRawTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static MethodHandle TIFFWriteRawTile$handle() {
        return TIFFWriteRawTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static MemorySegment TIFFWriteRawTile$address() {
        return TIFFWriteRawTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern tmsize_t TIFFWriteRawTile(TIFF *tif, uint32_t tile, void *data, tmsize_t cc)
     * }
     */
    public static long TIFFWriteRawTile(MemorySegment tif, int tile, MemorySegment data, long cc) {
        var mh$ = TIFFWriteRawTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFWriteRawTile", tif, tile, data, cc);
            }
            return (long)mh$.invokeExact(tif, tile, data, cc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFDataWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFDataWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFDataWidth(TIFFDataType)
     * }
     */
    public static FunctionDescriptor TIFFDataWidth$descriptor() {
        return TIFFDataWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFDataWidth(TIFFDataType)
     * }
     */
    public static MethodHandle TIFFDataWidth$handle() {
        return TIFFDataWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFDataWidth(TIFFDataType)
     * }
     */
    public static MemorySegment TIFFDataWidth$address() {
        return TIFFDataWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFDataWidth(TIFFDataType)
     * }
     */
    public static int TIFFDataWidth(int x0) {
        var mh$ = TIFFDataWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFDataWidth", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSetWriteOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSetWriteOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSetWriteOffset(TIFF *tif, toff_t off)
     * }
     */
    public static FunctionDescriptor TIFFSetWriteOffset$descriptor() {
        return TIFFSetWriteOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSetWriteOffset(TIFF *tif, toff_t off)
     * }
     */
    public static MethodHandle TIFFSetWriteOffset$handle() {
        return TIFFSetWriteOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSetWriteOffset(TIFF *tif, toff_t off)
     * }
     */
    public static MemorySegment TIFFSetWriteOffset$address() {
        return TIFFSetWriteOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSetWriteOffset(TIFF *tif, toff_t off)
     * }
     */
    public static void TIFFSetWriteOffset(MemorySegment tif, long off) {
        var mh$ = TIFFSetWriteOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSetWriteOffset", tif, off);
            }
            mh$.invokeExact(tif, off);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabShort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabShort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabShort(uint16_t *)
     * }
     */
    public static FunctionDescriptor TIFFSwabShort$descriptor() {
        return TIFFSwabShort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabShort(uint16_t *)
     * }
     */
    public static MethodHandle TIFFSwabShort$handle() {
        return TIFFSwabShort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabShort(uint16_t *)
     * }
     */
    public static MemorySegment TIFFSwabShort$address() {
        return TIFFSwabShort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabShort(uint16_t *)
     * }
     */
    public static void TIFFSwabShort(MemorySegment x0) {
        var mh$ = TIFFSwabShort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabShort", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabLong(uint32_t *)
     * }
     */
    public static FunctionDescriptor TIFFSwabLong$descriptor() {
        return TIFFSwabLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabLong(uint32_t *)
     * }
     */
    public static MethodHandle TIFFSwabLong$handle() {
        return TIFFSwabLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabLong(uint32_t *)
     * }
     */
    public static MemorySegment TIFFSwabLong$address() {
        return TIFFSwabLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabLong(uint32_t *)
     * }
     */
    public static void TIFFSwabLong(MemorySegment x0) {
        var mh$ = TIFFSwabLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabLong", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabLong8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabLong8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabLong8(uint64_t *)
     * }
     */
    public static FunctionDescriptor TIFFSwabLong8$descriptor() {
        return TIFFSwabLong8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabLong8(uint64_t *)
     * }
     */
    public static MethodHandle TIFFSwabLong8$handle() {
        return TIFFSwabLong8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabLong8(uint64_t *)
     * }
     */
    public static MemorySegment TIFFSwabLong8$address() {
        return TIFFSwabLong8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabLong8(uint64_t *)
     * }
     */
    public static void TIFFSwabLong8(MemorySegment x0) {
        var mh$ = TIFFSwabLong8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabLong8", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabFloat(float *)
     * }
     */
    public static FunctionDescriptor TIFFSwabFloat$descriptor() {
        return TIFFSwabFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabFloat(float *)
     * }
     */
    public static MethodHandle TIFFSwabFloat$handle() {
        return TIFFSwabFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabFloat(float *)
     * }
     */
    public static MemorySegment TIFFSwabFloat$address() {
        return TIFFSwabFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabFloat(float *)
     * }
     */
    public static void TIFFSwabFloat(MemorySegment x0) {
        var mh$ = TIFFSwabFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabFloat", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabDouble");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabDouble(double *)
     * }
     */
    public static FunctionDescriptor TIFFSwabDouble$descriptor() {
        return TIFFSwabDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabDouble(double *)
     * }
     */
    public static MethodHandle TIFFSwabDouble$handle() {
        return TIFFSwabDouble.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabDouble(double *)
     * }
     */
    public static MemorySegment TIFFSwabDouble$address() {
        return TIFFSwabDouble.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabDouble(double *)
     * }
     */
    public static void TIFFSwabDouble(MemorySegment x0) {
        var mh$ = TIFFSwabDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabDouble", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabArrayOfShort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabArrayOfShort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfShort(uint16_t *wp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFSwabArrayOfShort$descriptor() {
        return TIFFSwabArrayOfShort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfShort(uint16_t *wp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFSwabArrayOfShort$handle() {
        return TIFFSwabArrayOfShort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfShort(uint16_t *wp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFSwabArrayOfShort$address() {
        return TIFFSwabArrayOfShort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfShort(uint16_t *wp, tmsize_t n)
     * }
     */
    public static void TIFFSwabArrayOfShort(MemorySegment wp, long n) {
        var mh$ = TIFFSwabArrayOfShort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabArrayOfShort", wp, n);
            }
            mh$.invokeExact(wp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabArrayOfTriples {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabArrayOfTriples");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfTriples(uint8_t *tp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFSwabArrayOfTriples$descriptor() {
        return TIFFSwabArrayOfTriples.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfTriples(uint8_t *tp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFSwabArrayOfTriples$handle() {
        return TIFFSwabArrayOfTriples.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfTriples(uint8_t *tp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFSwabArrayOfTriples$address() {
        return TIFFSwabArrayOfTriples.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfTriples(uint8_t *tp, tmsize_t n)
     * }
     */
    public static void TIFFSwabArrayOfTriples(MemorySegment tp, long n) {
        var mh$ = TIFFSwabArrayOfTriples.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabArrayOfTriples", tp, n);
            }
            mh$.invokeExact(tp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabArrayOfLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabArrayOfLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong(uint32_t *lp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFSwabArrayOfLong$descriptor() {
        return TIFFSwabArrayOfLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong(uint32_t *lp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFSwabArrayOfLong$handle() {
        return TIFFSwabArrayOfLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong(uint32_t *lp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFSwabArrayOfLong$address() {
        return TIFFSwabArrayOfLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong(uint32_t *lp, tmsize_t n)
     * }
     */
    public static void TIFFSwabArrayOfLong(MemorySegment lp, long n) {
        var mh$ = TIFFSwabArrayOfLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabArrayOfLong", lp, n);
            }
            mh$.invokeExact(lp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabArrayOfLong8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabArrayOfLong8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong8(uint64_t *lp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFSwabArrayOfLong8$descriptor() {
        return TIFFSwabArrayOfLong8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong8(uint64_t *lp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFSwabArrayOfLong8$handle() {
        return TIFFSwabArrayOfLong8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong8(uint64_t *lp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFSwabArrayOfLong8$address() {
        return TIFFSwabArrayOfLong8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfLong8(uint64_t *lp, tmsize_t n)
     * }
     */
    public static void TIFFSwabArrayOfLong8(MemorySegment lp, long n) {
        var mh$ = TIFFSwabArrayOfLong8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabArrayOfLong8", lp, n);
            }
            mh$.invokeExact(lp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabArrayOfFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabArrayOfFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfFloat(float *fp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFSwabArrayOfFloat$descriptor() {
        return TIFFSwabArrayOfFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfFloat(float *fp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFSwabArrayOfFloat$handle() {
        return TIFFSwabArrayOfFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfFloat(float *fp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFSwabArrayOfFloat$address() {
        return TIFFSwabArrayOfFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfFloat(float *fp, tmsize_t n)
     * }
     */
    public static void TIFFSwabArrayOfFloat(MemorySegment fp, long n) {
        var mh$ = TIFFSwabArrayOfFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabArrayOfFloat", fp, n);
            }
            mh$.invokeExact(fp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFSwabArrayOfDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFSwabArrayOfDouble");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfDouble(double *dp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFSwabArrayOfDouble$descriptor() {
        return TIFFSwabArrayOfDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfDouble(double *dp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFSwabArrayOfDouble$handle() {
        return TIFFSwabArrayOfDouble.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfDouble(double *dp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFSwabArrayOfDouble$address() {
        return TIFFSwabArrayOfDouble.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFSwabArrayOfDouble(double *dp, tmsize_t n)
     * }
     */
    public static void TIFFSwabArrayOfDouble(MemorySegment dp, long n) {
        var mh$ = TIFFSwabArrayOfDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFSwabArrayOfDouble", dp, n);
            }
            mh$.invokeExact(dp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFReverseBits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFReverseBits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFReverseBits(uint8_t *cp, tmsize_t n)
     * }
     */
    public static FunctionDescriptor TIFFReverseBits$descriptor() {
        return TIFFReverseBits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFReverseBits(uint8_t *cp, tmsize_t n)
     * }
     */
    public static MethodHandle TIFFReverseBits$handle() {
        return TIFFReverseBits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFReverseBits(uint8_t *cp, tmsize_t n)
     * }
     */
    public static MemorySegment TIFFReverseBits$address() {
        return TIFFReverseBits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFReverseBits(uint8_t *cp, tmsize_t n)
     * }
     */
    public static void TIFFReverseBits(MemorySegment cp, long n) {
        var mh$ = TIFFReverseBits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFReverseBits", cp, n);
            }
            mh$.invokeExact(cp, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetBitRevTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetBitRevTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const unsigned char *TIFFGetBitRevTable(int)
     * }
     */
    public static FunctionDescriptor TIFFGetBitRevTable$descriptor() {
        return TIFFGetBitRevTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const unsigned char *TIFFGetBitRevTable(int)
     * }
     */
    public static MethodHandle TIFFGetBitRevTable$handle() {
        return TIFFGetBitRevTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const unsigned char *TIFFGetBitRevTable(int)
     * }
     */
    public static MemorySegment TIFFGetBitRevTable$address() {
        return TIFFGetBitRevTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const unsigned char *TIFFGetBitRevTable(int)
     * }
     */
    public static MemorySegment TIFFGetBitRevTable(int x0) {
        var mh$ = TIFFGetBitRevTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetBitRevTable", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetStrileOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetStrileOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffset(TIFF *tif, uint32_t strile)
     * }
     */
    public static FunctionDescriptor TIFFGetStrileOffset$descriptor() {
        return TIFFGetStrileOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffset(TIFF *tif, uint32_t strile)
     * }
     */
    public static MethodHandle TIFFGetStrileOffset$handle() {
        return TIFFGetStrileOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffset(TIFF *tif, uint32_t strile)
     * }
     */
    public static MemorySegment TIFFGetStrileOffset$address() {
        return TIFFGetStrileOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffset(TIFF *tif, uint32_t strile)
     * }
     */
    public static long TIFFGetStrileOffset(MemorySegment tif, int strile) {
        var mh$ = TIFFGetStrileOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetStrileOffset", tif, strile);
            }
            return (long)mh$.invokeExact(tif, strile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetStrileByteCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetStrileByteCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCount(TIFF *tif, uint32_t strile)
     * }
     */
    public static FunctionDescriptor TIFFGetStrileByteCount$descriptor() {
        return TIFFGetStrileByteCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCount(TIFF *tif, uint32_t strile)
     * }
     */
    public static MethodHandle TIFFGetStrileByteCount$handle() {
        return TIFFGetStrileByteCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCount(TIFF *tif, uint32_t strile)
     * }
     */
    public static MemorySegment TIFFGetStrileByteCount$address() {
        return TIFFGetStrileByteCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCount(TIFF *tif, uint32_t strile)
     * }
     */
    public static long TIFFGetStrileByteCount(MemorySegment tif, int strile) {
        var mh$ = TIFFGetStrileByteCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetStrileByteCount", tif, strile);
            }
            return (long)mh$.invokeExact(tif, strile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetStrileOffsetWithErr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetStrileOffsetWithErr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffsetWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static FunctionDescriptor TIFFGetStrileOffsetWithErr$descriptor() {
        return TIFFGetStrileOffsetWithErr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffsetWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static MethodHandle TIFFGetStrileOffsetWithErr$handle() {
        return TIFFGetStrileOffsetWithErr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffsetWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static MemorySegment TIFFGetStrileOffsetWithErr$address() {
        return TIFFGetStrileOffsetWithErr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileOffsetWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static long TIFFGetStrileOffsetWithErr(MemorySegment tif, int strile, MemorySegment pbErr) {
        var mh$ = TIFFGetStrileOffsetWithErr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetStrileOffsetWithErr", tif, strile, pbErr);
            }
            return (long)mh$.invokeExact(tif, strile, pbErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFGetStrileByteCountWithErr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_LONG_LONG,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFGetStrileByteCountWithErr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCountWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static FunctionDescriptor TIFFGetStrileByteCountWithErr$descriptor() {
        return TIFFGetStrileByteCountWithErr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCountWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static MethodHandle TIFFGetStrileByteCountWithErr$handle() {
        return TIFFGetStrileByteCountWithErr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCountWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static MemorySegment TIFFGetStrileByteCountWithErr$address() {
        return TIFFGetStrileByteCountWithErr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t TIFFGetStrileByteCountWithErr(TIFF *tif, uint32_t strile, int *pbErr)
     * }
     */
    public static long TIFFGetStrileByteCountWithErr(MemorySegment tif, int strile, MemorySegment pbErr) {
        var mh$ = TIFFGetStrileByteCountWithErr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFGetStrileByteCountWithErr", tif, strile, pbErr);
            }
            return (long)mh$.invokeExact(tif, strile, pbErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogL16toY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_DOUBLE,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogL16toY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double LogL16toY(int)
     * }
     */
    public static FunctionDescriptor LogL16toY$descriptor() {
        return LogL16toY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double LogL16toY(int)
     * }
     */
    public static MethodHandle LogL16toY$handle() {
        return LogL16toY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double LogL16toY(int)
     * }
     */
    public static MemorySegment LogL16toY$address() {
        return LogL16toY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double LogL16toY(int)
     * }
     */
    public static double LogL16toY(int x0) {
        var mh$ = LogL16toY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogL16toY", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogL10toY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_DOUBLE,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogL10toY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double LogL10toY(int)
     * }
     */
    public static FunctionDescriptor LogL10toY$descriptor() {
        return LogL10toY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double LogL10toY(int)
     * }
     */
    public static MethodHandle LogL10toY$handle() {
        return LogL10toY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double LogL10toY(int)
     * }
     */
    public static MemorySegment LogL10toY$address() {
        return LogL10toY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double LogL10toY(int)
     * }
     */
    public static double LogL10toY(int x0) {
        var mh$ = LogL10toY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogL10toY", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XYZtoRGB24 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("XYZtoRGB24");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XYZtoRGB24(float *, uint8_t *)
     * }
     */
    public static FunctionDescriptor XYZtoRGB24$descriptor() {
        return XYZtoRGB24.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XYZtoRGB24(float *, uint8_t *)
     * }
     */
    public static MethodHandle XYZtoRGB24$handle() {
        return XYZtoRGB24.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XYZtoRGB24(float *, uint8_t *)
     * }
     */
    public static MemorySegment XYZtoRGB24$address() {
        return XYZtoRGB24.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XYZtoRGB24(float *, uint8_t *)
     * }
     */
    public static void XYZtoRGB24(MemorySegment x0, MemorySegment x1) {
        var mh$ = XYZtoRGB24.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XYZtoRGB24", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uv_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("uv_decode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int uv_decode(double *, double *, int)
     * }
     */
    public static FunctionDescriptor uv_decode$descriptor() {
        return uv_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int uv_decode(double *, double *, int)
     * }
     */
    public static MethodHandle uv_decode$handle() {
        return uv_decode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int uv_decode(double *, double *, int)
     * }
     */
    public static MemorySegment uv_decode$address() {
        return uv_decode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int uv_decode(double *, double *, int)
     * }
     */
    public static int uv_decode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = uv_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uv_decode", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogLuv24toXYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogLuv24toXYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void LogLuv24toXYZ(uint32_t, float *)
     * }
     */
    public static FunctionDescriptor LogLuv24toXYZ$descriptor() {
        return LogLuv24toXYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void LogLuv24toXYZ(uint32_t, float *)
     * }
     */
    public static MethodHandle LogLuv24toXYZ$handle() {
        return LogLuv24toXYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void LogLuv24toXYZ(uint32_t, float *)
     * }
     */
    public static MemorySegment LogLuv24toXYZ$address() {
        return LogLuv24toXYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void LogLuv24toXYZ(uint32_t, float *)
     * }
     */
    public static void LogLuv24toXYZ(int x0, MemorySegment x1) {
        var mh$ = LogLuv24toXYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogLuv24toXYZ", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogLuv32toXYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogLuv32toXYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void LogLuv32toXYZ(uint32_t, float *)
     * }
     */
    public static FunctionDescriptor LogLuv32toXYZ$descriptor() {
        return LogLuv32toXYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void LogLuv32toXYZ(uint32_t, float *)
     * }
     */
    public static MethodHandle LogLuv32toXYZ$handle() {
        return LogLuv32toXYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void LogLuv32toXYZ(uint32_t, float *)
     * }
     */
    public static MemorySegment LogLuv32toXYZ$address() {
        return LogLuv32toXYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void LogLuv32toXYZ(uint32_t, float *)
     * }
     */
    public static void LogLuv32toXYZ(int x0, MemorySegment x1) {
        var mh$ = LogLuv32toXYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogLuv32toXYZ", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogL16fromY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_DOUBLE,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogL16fromY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int LogL16fromY(double, int)
     * }
     */
    public static FunctionDescriptor LogL16fromY$descriptor() {
        return LogL16fromY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int LogL16fromY(double, int)
     * }
     */
    public static MethodHandle LogL16fromY$handle() {
        return LogL16fromY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int LogL16fromY(double, int)
     * }
     */
    public static MemorySegment LogL16fromY$address() {
        return LogL16fromY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int LogL16fromY(double, int)
     * }
     */
    public static int LogL16fromY(double x0, int x1) {
        var mh$ = LogL16fromY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogL16fromY", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogL10fromY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_DOUBLE,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogL10fromY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int LogL10fromY(double, int)
     * }
     */
    public static FunctionDescriptor LogL10fromY$descriptor() {
        return LogL10fromY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int LogL10fromY(double, int)
     * }
     */
    public static MethodHandle LogL10fromY$handle() {
        return LogL10fromY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int LogL10fromY(double, int)
     * }
     */
    public static MemorySegment LogL10fromY$address() {
        return LogL10fromY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int LogL10fromY(double, int)
     * }
     */
    public static int LogL10fromY(double x0, int x1) {
        var mh$ = LogL10fromY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogL10fromY", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uv_encode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_DOUBLE,
            tiffio_h.C_DOUBLE,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("uv_encode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int uv_encode(double, double, int)
     * }
     */
    public static FunctionDescriptor uv_encode$descriptor() {
        return uv_encode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int uv_encode(double, double, int)
     * }
     */
    public static MethodHandle uv_encode$handle() {
        return uv_encode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int uv_encode(double, double, int)
     * }
     */
    public static MemorySegment uv_encode$address() {
        return uv_encode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int uv_encode(double, double, int)
     * }
     */
    public static int uv_encode(double x0, double x1, int x2) {
        var mh$ = uv_encode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uv_encode", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogLuv24fromXYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogLuv24fromXYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t LogLuv24fromXYZ(float *, int)
     * }
     */
    public static FunctionDescriptor LogLuv24fromXYZ$descriptor() {
        return LogLuv24fromXYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t LogLuv24fromXYZ(float *, int)
     * }
     */
    public static MethodHandle LogLuv24fromXYZ$handle() {
        return LogLuv24fromXYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t LogLuv24fromXYZ(float *, int)
     * }
     */
    public static MemorySegment LogLuv24fromXYZ$address() {
        return LogLuv24fromXYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t LogLuv24fromXYZ(float *, int)
     * }
     */
    public static int LogLuv24fromXYZ(MemorySegment x0, int x1) {
        var mh$ = LogLuv24fromXYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogLuv24fromXYZ", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LogLuv32fromXYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("LogLuv32fromXYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t LogLuv32fromXYZ(float *, int)
     * }
     */
    public static FunctionDescriptor LogLuv32fromXYZ$descriptor() {
        return LogLuv32fromXYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t LogLuv32fromXYZ(float *, int)
     * }
     */
    public static MethodHandle LogLuv32fromXYZ$handle() {
        return LogLuv32fromXYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t LogLuv32fromXYZ(float *, int)
     * }
     */
    public static MemorySegment LogLuv32fromXYZ$address() {
        return LogLuv32fromXYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t LogLuv32fromXYZ(float *, int)
     * }
     */
    public static int LogLuv32fromXYZ(MemorySegment x0, int x1) {
        var mh$ = LogLuv32fromXYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LogLuv32fromXYZ", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCIELabToRGBInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCIELabToRGBInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFCIELabToRGBInit(TIFFCIELabToRGB *, const TIFFDisplay *, float *)
     * }
     */
    public static FunctionDescriptor TIFFCIELabToRGBInit$descriptor() {
        return TIFFCIELabToRGBInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFCIELabToRGBInit(TIFFCIELabToRGB *, const TIFFDisplay *, float *)
     * }
     */
    public static MethodHandle TIFFCIELabToRGBInit$handle() {
        return TIFFCIELabToRGBInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFCIELabToRGBInit(TIFFCIELabToRGB *, const TIFFDisplay *, float *)
     * }
     */
    public static MemorySegment TIFFCIELabToRGBInit$address() {
        return TIFFCIELabToRGBInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFCIELabToRGBInit(TIFFCIELabToRGB *, const TIFFDisplay *, float *)
     * }
     */
    public static int TIFFCIELabToRGBInit(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = TIFFCIELabToRGBInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCIELabToRGBInit", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFCIELabToXYZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFCIELabToXYZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFCIELabToXYZ(TIFFCIELabToRGB *, uint32_t, int32_t, int32_t, float *, float *, float *)
     * }
     */
    public static FunctionDescriptor TIFFCIELabToXYZ$descriptor() {
        return TIFFCIELabToXYZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFCIELabToXYZ(TIFFCIELabToRGB *, uint32_t, int32_t, int32_t, float *, float *, float *)
     * }
     */
    public static MethodHandle TIFFCIELabToXYZ$handle() {
        return TIFFCIELabToXYZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFCIELabToXYZ(TIFFCIELabToRGB *, uint32_t, int32_t, int32_t, float *, float *, float *)
     * }
     */
    public static MemorySegment TIFFCIELabToXYZ$address() {
        return TIFFCIELabToXYZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFCIELabToXYZ(TIFFCIELabToRGB *, uint32_t, int32_t, int32_t, float *, float *, float *)
     * }
     */
    public static void TIFFCIELabToXYZ(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TIFFCIELabToXYZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFCIELabToXYZ", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFXYZToRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_FLOAT,
            tiffio_h.C_FLOAT,
            tiffio_h.C_FLOAT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFXYZToRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFXYZToRGB(TIFFCIELabToRGB *, float, float, float, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static FunctionDescriptor TIFFXYZToRGB$descriptor() {
        return TIFFXYZToRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFXYZToRGB(TIFFCIELabToRGB *, float, float, float, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static MethodHandle TIFFXYZToRGB$handle() {
        return TIFFXYZToRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFXYZToRGB(TIFFCIELabToRGB *, float, float, float, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static MemorySegment TIFFXYZToRGB$address() {
        return TIFFXYZToRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFXYZToRGB(TIFFCIELabToRGB *, float, float, float, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static void TIFFXYZToRGB(MemorySegment x0, float x1, float x2, float x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TIFFXYZToRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFXYZToRGB", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFYCbCrToRGBInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFYCbCrToRGBInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFYCbCrToRGBInit(TIFFYCbCrToRGB *, float *, float *)
     * }
     */
    public static FunctionDescriptor TIFFYCbCrToRGBInit$descriptor() {
        return TIFFYCbCrToRGBInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFYCbCrToRGBInit(TIFFYCbCrToRGB *, float *, float *)
     * }
     */
    public static MethodHandle TIFFYCbCrToRGBInit$handle() {
        return TIFFYCbCrToRGBInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFYCbCrToRGBInit(TIFFYCbCrToRGB *, float *, float *)
     * }
     */
    public static MemorySegment TIFFYCbCrToRGBInit$address() {
        return TIFFYCbCrToRGBInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFYCbCrToRGBInit(TIFFYCbCrToRGB *, float *, float *)
     * }
     */
    public static int TIFFYCbCrToRGBInit(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = TIFFYCbCrToRGBInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFYCbCrToRGBInit", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFYCbCrtoRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFYCbCrtoRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void TIFFYCbCrtoRGB(TIFFYCbCrToRGB *, uint32_t, int32_t, int32_t, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static FunctionDescriptor TIFFYCbCrtoRGB$descriptor() {
        return TIFFYCbCrtoRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void TIFFYCbCrtoRGB(TIFFYCbCrToRGB *, uint32_t, int32_t, int32_t, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static MethodHandle TIFFYCbCrtoRGB$handle() {
        return TIFFYCbCrtoRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void TIFFYCbCrtoRGB(TIFFYCbCrToRGB *, uint32_t, int32_t, int32_t, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static MemorySegment TIFFYCbCrtoRGB$address() {
        return TIFFYCbCrtoRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void TIFFYCbCrtoRGB(TIFFYCbCrToRGB *, uint32_t, int32_t, int32_t, uint32_t *, uint32_t *, uint32_t *)
     * }
     */
    public static void TIFFYCbCrtoRGB(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TIFFYCbCrtoRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFYCbCrtoRGB", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TIFFMergeFieldInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT
        );

        public static final MemorySegment ADDR = tiffio_h.findOrThrow("TIFFMergeFieldInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int TIFFMergeFieldInfo(TIFF *, const TIFFFieldInfo [], uint32_t)
     * }
     */
    public static FunctionDescriptor TIFFMergeFieldInfo$descriptor() {
        return TIFFMergeFieldInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int TIFFMergeFieldInfo(TIFF *, const TIFFFieldInfo [], uint32_t)
     * }
     */
    public static MethodHandle TIFFMergeFieldInfo$handle() {
        return TIFFMergeFieldInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int TIFFMergeFieldInfo(TIFF *, const TIFFFieldInfo [], uint32_t)
     * }
     */
    public static MemorySegment TIFFMergeFieldInfo$address() {
        return TIFFMergeFieldInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int TIFFMergeFieldInfo(TIFF *, const TIFFFieldInfo [], uint32_t)
     * }
     */
    public static int TIFFMergeFieldInfo(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TIFFMergeFieldInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TIFFMergeFieldInfo", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = tiffio_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI_8_LENGTH_MODIFIER__ "hh"
     * }
     */
    public static MemorySegment __PRI_8_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __PRI_8_LENGTH_MODIFIER__
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hh");
        }
        return Holder.__PRI_8_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI_64_LENGTH_MODIFIER__ "ll"
     * }
     */
    public static MemorySegment __PRI_64_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __PRI_64_LENGTH_MODIFIER__
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ll");
        }
        return Holder.__PRI_64_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __SCN_64_LENGTH_MODIFIER__ "ll"
     * }
     */
    public static MemorySegment __SCN_64_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __SCN_64_LENGTH_MODIFIER__
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ll");
        }
        return Holder.__SCN_64_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI_MAX_LENGTH_MODIFIER__ "j"
     * }
     */
    public static MemorySegment __PRI_MAX_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __PRI_MAX_LENGTH_MODIFIER__
                = tiffio_h.LIBRARY_ARENA.allocateFrom("j");
        }
        return Holder.__PRI_MAX_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __SCN_MAX_LENGTH_MODIFIER__ "j"
     * }
     */
    public static MemorySegment __SCN_MAX_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __SCN_MAX_LENGTH_MODIFIER__
                = tiffio_h.LIBRARY_ARENA.allocateFrom("j");
        }
        return Holder.__SCN_MAX_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define PRId8 "hhd"
     * }
     */
    public static MemorySegment PRId8() {
        class Holder {
            static final MemorySegment PRId8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRId8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi8 "hhi"
     * }
     */
    public static MemorySegment PRIi8() {
        class Holder {
            static final MemorySegment PRIi8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIi8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo8 "hho"
     * }
     */
    public static MemorySegment PRIo8() {
        class Holder {
            static final MemorySegment PRIo8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIo8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu8 "hhu"
     * }
     */
    public static MemorySegment PRIu8() {
        class Holder {
            static final MemorySegment PRIu8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIu8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx8 "hhx"
     * }
     */
    public static MemorySegment PRIx8() {
        class Holder {
            static final MemorySegment PRIx8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIx8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX8 "hhX"
     * }
     */
    public static MemorySegment PRIX8() {
        class Holder {
            static final MemorySegment PRIX8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIX8;
    }
    /**
     * {@snippet lang=c :
     * #define PRId16 "hd"
     * }
     */
    public static MemorySegment PRId16() {
        class Holder {
            static final MemorySegment PRId16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRId16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi16 "hi"
     * }
     */
    public static MemorySegment PRIi16() {
        class Holder {
            static final MemorySegment PRIi16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIi16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo16 "ho"
     * }
     */
    public static MemorySegment PRIo16() {
        class Holder {
            static final MemorySegment PRIo16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIo16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu16 "hu"
     * }
     */
    public static MemorySegment PRIu16() {
        class Holder {
            static final MemorySegment PRIu16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIu16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx16 "hx"
     * }
     */
    public static MemorySegment PRIx16() {
        class Holder {
            static final MemorySegment PRIx16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIx16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX16 "hX"
     * }
     */
    public static MemorySegment PRIX16() {
        class Holder {
            static final MemorySegment PRIX16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIX16;
    }
    /**
     * {@snippet lang=c :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        class Holder {
            static final MemorySegment PRId32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        class Holder {
            static final MemorySegment PRIi32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        class Holder {
            static final MemorySegment PRIo32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        class Holder {
            static final MemorySegment PRIu32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        class Holder {
            static final MemorySegment PRIx32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        class Holder {
            static final MemorySegment PRIX32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX32;
    }
    /**
     * {@snippet lang=c :
     * #define PRId64 "lld"
     * }
     */
    public static MemorySegment PRId64() {
        class Holder {
            static final MemorySegment PRId64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRId64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi64 "lli"
     * }
     */
    public static MemorySegment PRIi64() {
        class Holder {
            static final MemorySegment PRIi64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIi64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo64 "llo"
     * }
     */
    public static MemorySegment PRIo64() {
        class Holder {
            static final MemorySegment PRIo64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIo64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu64 "llu"
     * }
     */
    public static MemorySegment PRIu64() {
        class Holder {
            static final MemorySegment PRIu64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIu64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx64 "llx"
     * }
     */
    public static MemorySegment PRIx64() {
        class Holder {
            static final MemorySegment PRIx64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIx64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX64 "llX"
     * }
     */
    public static MemorySegment PRIX64() {
        class Holder {
            static final MemorySegment PRIX64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIX64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST8 "hhd"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        class Holder {
            static final MemorySegment PRIdLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRIdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST8 "hhi"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        class Holder {
            static final MemorySegment PRIiLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST8 "hho"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        class Holder {
            static final MemorySegment PRIoLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST8 "hhu"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        class Holder {
            static final MemorySegment PRIuLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST8 "hhx"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        class Holder {
            static final MemorySegment PRIxLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST8 "hhX"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        class Holder {
            static final MemorySegment PRIXLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIXLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST16 "hd"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        class Holder {
            static final MemorySegment PRIdLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRIdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST16 "hi"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        class Holder {
            static final MemorySegment PRIiLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST16 "ho"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        class Holder {
            static final MemorySegment PRIoLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST16 "hu"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        class Holder {
            static final MemorySegment PRIuLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST16 "hx"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        class Holder {
            static final MemorySegment PRIxLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST16 "hX"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        class Holder {
            static final MemorySegment PRIXLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIXLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        class Holder {
            static final MemorySegment PRIdLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        class Holder {
            static final MemorySegment PRIiLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        class Holder {
            static final MemorySegment PRIoLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        class Holder {
            static final MemorySegment PRIuLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        class Holder {
            static final MemorySegment PRIxLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        class Holder {
            static final MemorySegment PRIXLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST64 "lld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        class Holder {
            static final MemorySegment PRIdLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST64 "lli"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        class Holder {
            static final MemorySegment PRIiLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST64 "llo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        class Holder {
            static final MemorySegment PRIoLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST64 "llu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        class Holder {
            static final MemorySegment PRIuLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST64 "llx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        class Holder {
            static final MemorySegment PRIxLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST64 "llX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        class Holder {
            static final MemorySegment PRIXLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST8 "hhd"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        class Holder {
            static final MemorySegment PRIdFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRIdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST8 "hhi"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        class Holder {
            static final MemorySegment PRIiFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST8 "hho"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        class Holder {
            static final MemorySegment PRIoFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST8 "hhu"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        class Holder {
            static final MemorySegment PRIuFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST8 "hhx"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        class Holder {
            static final MemorySegment PRIxFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST8 "hhX"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        class Holder {
            static final MemorySegment PRIXFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIXFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST16 "hd"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        class Holder {
            static final MemorySegment PRIdFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRIdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST16 "hi"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        class Holder {
            static final MemorySegment PRIiFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST16 "ho"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        class Holder {
            static final MemorySegment PRIoFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST16 "hu"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        class Holder {
            static final MemorySegment PRIuFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST16 "hx"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        class Holder {
            static final MemorySegment PRIxFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST16 "hX"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        class Holder {
            static final MemorySegment PRIXFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIXFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST32 "d"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        class Holder {
            static final MemorySegment PRIdFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST32 "i"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        class Holder {
            static final MemorySegment PRIiFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST32 "o"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        class Holder {
            static final MemorySegment PRIoFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST32 "u"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        class Holder {
            static final MemorySegment PRIuFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST32 "x"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        class Holder {
            static final MemorySegment PRIxFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST32 "X"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        class Holder {
            static final MemorySegment PRIXFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST64 "lld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        class Holder {
            static final MemorySegment PRIdFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST64 "lli"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        class Holder {
            static final MemorySegment PRIiFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST64 "llo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        class Holder {
            static final MemorySegment PRIoFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST64 "llu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        class Holder {
            static final MemorySegment PRIuFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST64 "llx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        class Holder {
            static final MemorySegment PRIxFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST64 "llX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        class Holder {
            static final MemorySegment PRIXFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdPTR "ld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        class Holder {
            static final MemorySegment PRIdPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiPTR "li"
     * }
     */
    public static MemorySegment PRIiPTR() {
        class Holder {
            static final MemorySegment PRIiPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoPTR "lo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        class Holder {
            static final MemorySegment PRIoPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuPTR "lu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        class Holder {
            static final MemorySegment PRIuPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxPTR "lx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        class Holder {
            static final MemorySegment PRIxPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXPTR "lX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        class Holder {
            static final MemorySegment PRIXPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdMAX "jd"
     * }
     */
    public static MemorySegment PRIdMAX() {
        class Holder {
            static final MemorySegment PRIdMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jd");
        }
        return Holder.PRIdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiMAX "ji"
     * }
     */
    public static MemorySegment PRIiMAX() {
        class Holder {
            static final MemorySegment PRIiMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ji");
        }
        return Holder.PRIiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoMAX "jo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        class Holder {
            static final MemorySegment PRIoMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jo");
        }
        return Holder.PRIoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuMAX "ju"
     * }
     */
    public static MemorySegment PRIuMAX() {
        class Holder {
            static final MemorySegment PRIuMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ju");
        }
        return Holder.PRIuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxMAX "jx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        class Holder {
            static final MemorySegment PRIxMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jx");
        }
        return Holder.PRIxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXMAX "jX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        class Holder {
            static final MemorySegment PRIXMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jX");
        }
        return Holder.PRIXMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        class Holder {
            static final MemorySegment SCNd8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNd8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        class Holder {
            static final MemorySegment SCNi8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNi8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        class Holder {
            static final MemorySegment SCNo8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNo8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        class Holder {
            static final MemorySegment SCNu8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNu8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        class Holder {
            static final MemorySegment SCNx8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNx8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        class Holder {
            static final MemorySegment SCNd16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNd16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        class Holder {
            static final MemorySegment SCNi16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNi16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        class Holder {
            static final MemorySegment SCNo16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNo16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        class Holder {
            static final MemorySegment SCNu16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNu16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        class Holder {
            static final MemorySegment SCNx16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNx16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        class Holder {
            static final MemorySegment SCNd32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNd32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        class Holder {
            static final MemorySegment SCNi32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNi32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        class Holder {
            static final MemorySegment SCNo32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNo32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        class Holder {
            static final MemorySegment SCNu32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNu32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        class Holder {
            static final MemorySegment SCNx32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNx32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd64 "lld"
     * }
     */
    public static MemorySegment SCNd64() {
        class Holder {
            static final MemorySegment SCNd64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNd64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi64 "lli"
     * }
     */
    public static MemorySegment SCNi64() {
        class Holder {
            static final MemorySegment SCNi64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNi64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo64 "llo"
     * }
     */
    public static MemorySegment SCNo64() {
        class Holder {
            static final MemorySegment SCNo64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNo64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu64 "llu"
     * }
     */
    public static MemorySegment SCNu64() {
        class Holder {
            static final MemorySegment SCNu64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNu64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx64 "llx"
     * }
     */
    public static MemorySegment SCNx64() {
        class Holder {
            static final MemorySegment SCNx64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNx64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        class Holder {
            static final MemorySegment SCNdLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        class Holder {
            static final MemorySegment SCNiLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        class Holder {
            static final MemorySegment SCNoLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        class Holder {
            static final MemorySegment SCNuLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        class Holder {
            static final MemorySegment SCNxLEAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        class Holder {
            static final MemorySegment SCNdLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        class Holder {
            static final MemorySegment SCNiLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        class Holder {
            static final MemorySegment SCNoLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        class Holder {
            static final MemorySegment SCNuLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        class Holder {
            static final MemorySegment SCNxLEAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        class Holder {
            static final MemorySegment SCNdLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        class Holder {
            static final MemorySegment SCNiLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        class Holder {
            static final MemorySegment SCNoLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        class Holder {
            static final MemorySegment SCNuLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        class Holder {
            static final MemorySegment SCNxLEAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST64 "lld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        class Holder {
            static final MemorySegment SCNdLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST64 "lli"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        class Holder {
            static final MemorySegment SCNiLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST64 "llo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        class Holder {
            static final MemorySegment SCNoLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST64 "llu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        class Holder {
            static final MemorySegment SCNuLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST64 "llx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        class Holder {
            static final MemorySegment SCNxLEAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        class Holder {
            static final MemorySegment SCNdFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        class Holder {
            static final MemorySegment SCNiFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        class Holder {
            static final MemorySegment SCNoFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        class Holder {
            static final MemorySegment SCNuFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        class Holder {
            static final MemorySegment SCNxFAST8
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST16 "hd"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        class Holder {
            static final MemorySegment SCNdFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST16 "hi"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        class Holder {
            static final MemorySegment SCNiFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST16 "ho"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        class Holder {
            static final MemorySegment SCNoFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST16 "hu"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        class Holder {
            static final MemorySegment SCNuFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST16 "hx"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        class Holder {
            static final MemorySegment SCNxFAST16
                = tiffio_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST32 "d"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        class Holder {
            static final MemorySegment SCNdFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST32 "i"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        class Holder {
            static final MemorySegment SCNiFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST32 "o"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        class Holder {
            static final MemorySegment SCNoFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST32 "u"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        class Holder {
            static final MemorySegment SCNuFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST32 "x"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        class Holder {
            static final MemorySegment SCNxFAST32
                = tiffio_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST64 "lld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        class Holder {
            static final MemorySegment SCNdFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST64 "lli"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        class Holder {
            static final MemorySegment SCNiFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST64 "llo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        class Holder {
            static final MemorySegment SCNoFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST64 "llu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        class Holder {
            static final MemorySegment SCNuFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST64 "llx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        class Holder {
            static final MemorySegment SCNxFAST64
                = tiffio_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdPTR "ld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        class Holder {
            static final MemorySegment SCNdPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiPTR "li"
     * }
     */
    public static MemorySegment SCNiPTR() {
        class Holder {
            static final MemorySegment SCNiPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoPTR "lo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        class Holder {
            static final MemorySegment SCNoPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuPTR "lu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        class Holder {
            static final MemorySegment SCNuPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxPTR "lx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        class Holder {
            static final MemorySegment SCNxPTR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdMAX "jd"
     * }
     */
    public static MemorySegment SCNdMAX() {
        class Holder {
            static final MemorySegment SCNdMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jd");
        }
        return Holder.SCNdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiMAX "ji"
     * }
     */
    public static MemorySegment SCNiMAX() {
        class Holder {
            static final MemorySegment SCNiMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ji");
        }
        return Holder.SCNiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoMAX "jo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        class Holder {
            static final MemorySegment SCNoMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jo");
        }
        return Holder.SCNoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuMAX "ju"
     * }
     */
    public static MemorySegment SCNuMAX() {
        class Holder {
            static final MemorySegment SCNuMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("ju");
        }
        return Holder.SCNuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxMAX "jx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        class Holder {
            static final MemorySegment SCNxMAX
                = tiffio_h.LIBRARY_ARENA.allocateFrom("jx");
        }
        return Holder.SCNxMAX;
    }
    private static final int MAC_OS_X_VERSION_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return MAC_OS_X_VERSION_10_0;
    }
    private static final int MAC_OS_X_VERSION_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return MAC_OS_X_VERSION_10_1;
    }
    private static final int MAC_OS_X_VERSION_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return MAC_OS_X_VERSION_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return MAC_OS_X_VERSION_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return MAC_OS_X_VERSION_10_4;
    }
    private static final int MAC_OS_X_VERSION_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return MAC_OS_X_VERSION_10_5;
    }
    private static final int MAC_OS_X_VERSION_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return MAC_OS_X_VERSION_10_6;
    }
    private static final int MAC_OS_X_VERSION_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return MAC_OS_X_VERSION_10_7;
    }
    private static final int MAC_OS_X_VERSION_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return MAC_OS_X_VERSION_10_8;
    }
    private static final int MAC_OS_X_VERSION_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return MAC_OS_X_VERSION_10_9;
    }
    private static final int MAC_OS_X_VERSION_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return MAC_OS_X_VERSION_10_10;
    }
    private static final int MAC_OS_X_VERSION_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return MAC_OS_X_VERSION_10_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return MAC_OS_X_VERSION_10_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return MAC_OS_X_VERSION_10_11;
    }
    private static final int MAC_OS_X_VERSION_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return MAC_OS_X_VERSION_10_11_2;
    }
    private static final int MAC_OS_X_VERSION_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return MAC_OS_X_VERSION_10_11_3;
    }
    private static final int MAC_OS_X_VERSION_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return MAC_OS_X_VERSION_10_11_4;
    }
    private static final int MAC_OS_X_VERSION_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return MAC_OS_X_VERSION_10_12;
    }
    private static final int MAC_OS_X_VERSION_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return MAC_OS_X_VERSION_10_12_1;
    }
    private static final int MAC_OS_X_VERSION_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return MAC_OS_X_VERSION_10_12_2;
    }
    private static final int MAC_OS_X_VERSION_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return MAC_OS_X_VERSION_10_12_4;
    }
    private static final int MAC_OS_X_VERSION_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return MAC_OS_X_VERSION_10_13;
    }
    private static final int MAC_OS_X_VERSION_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return MAC_OS_X_VERSION_10_13_1;
    }
    private static final int MAC_OS_X_VERSION_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return MAC_OS_X_VERSION_10_13_2;
    }
    private static final int MAC_OS_X_VERSION_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return MAC_OS_X_VERSION_10_13_4;
    }
    private static final int MAC_OS_X_VERSION_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return MAC_OS_X_VERSION_10_14;
    }
    private static final int MAC_OS_X_VERSION_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return MAC_OS_X_VERSION_10_14_1;
    }
    private static final int MAC_OS_X_VERSION_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return MAC_OS_X_VERSION_10_14_4;
    }
    private static final int MAC_OS_X_VERSION_10_14_5 = (int)101405L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_5 101405
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_5() {
        return MAC_OS_X_VERSION_10_14_5;
    }
    private static final int MAC_OS_X_VERSION_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return MAC_OS_X_VERSION_10_14_6;
    }
    private static final int MAC_OS_X_VERSION_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return MAC_OS_X_VERSION_10_15;
    }
    private static final int MAC_OS_X_VERSION_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return MAC_OS_X_VERSION_10_15_1;
    }
    private static final int MAC_OS_X_VERSION_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_4 101504
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_4() {
        return MAC_OS_X_VERSION_10_15_4;
    }
    private static final int MAC_OS_X_VERSION_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return MAC_OS_X_VERSION_10_16;
    }
    private static final int MAC_OS_VERSION_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return MAC_OS_VERSION_11_0;
    }
    private static final int MAC_OS_VERSION_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return MAC_OS_VERSION_11_1;
    }
    private static final int MAC_OS_VERSION_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return MAC_OS_VERSION_11_3;
    }
    private static final int MAC_OS_VERSION_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_4 110400
     * }
     */
    public static int MAC_OS_VERSION_11_4() {
        return MAC_OS_VERSION_11_4;
    }
    private static final int MAC_OS_VERSION_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_5 110500
     * }
     */
    public static int MAC_OS_VERSION_11_5() {
        return MAC_OS_VERSION_11_5;
    }
    private static final int MAC_OS_VERSION_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_6 110600
     * }
     */
    public static int MAC_OS_VERSION_11_6() {
        return MAC_OS_VERSION_11_6;
    }
    private static final int MAC_OS_VERSION_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return MAC_OS_VERSION_12_0;
    }
    private static final int MAC_OS_VERSION_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_1 120100
     * }
     */
    public static int MAC_OS_VERSION_12_1() {
        return MAC_OS_VERSION_12_1;
    }
    private static final int MAC_OS_VERSION_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_2 120200
     * }
     */
    public static int MAC_OS_VERSION_12_2() {
        return MAC_OS_VERSION_12_2;
    }
    private static final int MAC_OS_VERSION_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_3 120300
     * }
     */
    public static int MAC_OS_VERSION_12_3() {
        return MAC_OS_VERSION_12_3;
    }
    private static final int MAC_OS_VERSION_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_4 120400
     * }
     */
    public static int MAC_OS_VERSION_12_4() {
        return MAC_OS_VERSION_12_4;
    }
    private static final int MAC_OS_VERSION_12_5 = (int)120500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_5 120500
     * }
     */
    public static int MAC_OS_VERSION_12_5() {
        return MAC_OS_VERSION_12_5;
    }
    private static final int MAC_OS_VERSION_12_6 = (int)120600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_6 120600
     * }
     */
    public static int MAC_OS_VERSION_12_6() {
        return MAC_OS_VERSION_12_6;
    }
    private static final int MAC_OS_VERSION_12_7 = (int)120700L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_7 120700
     * }
     */
    public static int MAC_OS_VERSION_12_7() {
        return MAC_OS_VERSION_12_7;
    }
    private static final int MAC_OS_VERSION_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return MAC_OS_VERSION_13_0;
    }
    private static final int MAC_OS_VERSION_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return MAC_OS_VERSION_13_1;
    }
    private static final int MAC_OS_VERSION_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_2 130200
     * }
     */
    public static int MAC_OS_VERSION_13_2() {
        return MAC_OS_VERSION_13_2;
    }
    private static final int MAC_OS_VERSION_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return MAC_OS_VERSION_13_3;
    }
    private static final int MAC_OS_VERSION_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_4 130400
     * }
     */
    public static int MAC_OS_VERSION_13_4() {
        return MAC_OS_VERSION_13_4;
    }
    private static final int MAC_OS_VERSION_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_5 130500
     * }
     */
    public static int MAC_OS_VERSION_13_5() {
        return MAC_OS_VERSION_13_5;
    }
    private static final int MAC_OS_VERSION_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_6 130600
     * }
     */
    public static int MAC_OS_VERSION_13_6() {
        return MAC_OS_VERSION_13_6;
    }
    private static final int MAC_OS_VERSION_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_0 140000
     * }
     */
    public static int MAC_OS_VERSION_14_0() {
        return MAC_OS_VERSION_14_0;
    }
    private static final int MAC_OS_VERSION_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_1 140100
     * }
     */
    public static int MAC_OS_VERSION_14_1() {
        return MAC_OS_VERSION_14_1;
    }
    private static final int MAC_OS_VERSION_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_2 140200
     * }
     */
    public static int MAC_OS_VERSION_14_2() {
        return MAC_OS_VERSION_14_2;
    }
    private static final int MAC_OS_VERSION_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_3 140300
     * }
     */
    public static int MAC_OS_VERSION_14_3() {
        return MAC_OS_VERSION_14_3;
    }
    private static final int MAC_OS_VERSION_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_4 140400
     * }
     */
    public static int MAC_OS_VERSION_14_4() {
        return MAC_OS_VERSION_14_4;
    }
    private static final int MAC_OS_VERSION_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_5 140500
     * }
     */
    public static int MAC_OS_VERSION_14_5() {
        return MAC_OS_VERSION_14_5;
    }
    private static final int __MAC_OS_X_VERSION_MAX_ALLOWED = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 140500
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return __MAC_OS_X_VERSION_MAX_ALLOWED;
    }
    private static final int __DARWIN_WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return __DARWIN_WCHAR_MAX;
    }
    private static final int __DARWIN_WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return __DARWIN_WCHAR_MIN;
    }
    private static final int __DARWIN_WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return __DARWIN_WEOF;
    }
    private static final int HOST_FILLORDER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define HOST_FILLORDER 2
     * }
     */
    public static int HOST_FILLORDER() {
        return HOST_FILLORDER;
    }
    private static final int CODINGMETHODS_T4_1D = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CODINGMETHODS_T4_1D 2
     * }
     */
    public static int CODINGMETHODS_T4_1D() {
        return CODINGMETHODS_T4_1D;
    }
    private static final int CODINGMETHODS_T4_2D = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CODINGMETHODS_T4_2D 4
     * }
     */
    public static int CODINGMETHODS_T4_2D() {
        return CODINGMETHODS_T4_2D;
    }
    private static final int CODINGMETHODS_T6 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CODINGMETHODS_T6 8
     * }
     */
    public static int CODINGMETHODS_T6() {
        return CODINGMETHODS_T6;
    }
    private static final int CODINGMETHODS_T85 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CODINGMETHODS_T85 16
     * }
     */
    public static int CODINGMETHODS_T85() {
        return CODINGMETHODS_T85;
    }
    private static final int CODINGMETHODS_T42 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CODINGMETHODS_T42 32
     * }
     */
    public static int CODINGMETHODS_T42() {
        return CODINGMETHODS_T42;
    }
    private static final int CODINGMETHODS_T43 = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CODINGMETHODS_T43 64
     * }
     */
    public static int CODINGMETHODS_T43() {
        return CODINGMETHODS_T43;
    }
    private static final int FAXMODE_CLASSF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FAXMODE_CLASSF 1
     * }
     */
    public static int FAXMODE_CLASSF() {
        return FAXMODE_CLASSF;
    }
    /**
     * {@snippet lang=c :
     * #define TIFFLIB_VERSION_STR "LIBTIFF, Version 4.6.0
     * Copyright (c) 1988-1996 Sam Leffler
     * Copyright (c) 1991-1996 Silicon Graphics, Inc."
     * }
     */
    public static MemorySegment TIFFLIB_VERSION_STR() {
        class Holder {
            static final MemorySegment TIFFLIB_VERSION_STR
                = tiffio_h.LIBRARY_ARENA.allocateFrom("LIBTIFF, Version 4.6.0\nCopyright (c) 1988-1996 Sam Leffler\nCopyright (c) 1991-1996 Silicon Graphics, Inc.");
        }
        return Holder.TIFFLIB_VERSION_STR;
    }
    /**
     * {@snippet lang=c :
     * #define TIFFLIB_VERSION_STR_MAJ_MIN_MIC "4.6.0"
     * }
     */
    public static MemorySegment TIFFLIB_VERSION_STR_MAJ_MIN_MIC() {
        class Holder {
            static final MemorySegment TIFFLIB_VERSION_STR_MAJ_MIN_MIC
                = tiffio_h.LIBRARY_ARENA.allocateFrom("4.6.0");
        }
        return Holder.TIFFLIB_VERSION_STR_MAJ_MIN_MIC;
    }
    private static final long TIFF_TMSIZE_T_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define TIFF_TMSIZE_T_MAX 9223372036854775807
     * }
     */
    public static long TIFF_TMSIZE_T_MAX() {
        return TIFF_TMSIZE_T_MAX;
    }
    private static final float D65_X0 = 95.0469970703125f;
    /**
     * {@snippet lang=c :
     * #define D65_X0 95.0469970703125
     * }
     */
    public static float D65_X0() {
        return D65_X0;
    }
    private static final float D65_Y0 = 100.0f;
    /**
     * {@snippet lang=c :
     * #define D65_Y0 100.0
     * }
     */
    public static float D65_Y0() {
        return D65_Y0;
    }
    private static final float D65_Z0 = 108.88269805908203f;
    /**
     * {@snippet lang=c :
     * #define D65_Z0 108.88269805908203
     * }
     */
    public static float D65_Z0() {
        return D65_Z0;
    }
    private static final float D50_X0 = 96.42500305175781f;
    /**
     * {@snippet lang=c :
     * #define D50_X0 96.42500305175781
     * }
     */
    public static float D50_X0() {
        return D50_X0;
    }
    private static final float D50_Y0 = 100.0f;
    /**
     * {@snippet lang=c :
     * #define D50_Y0 100.0
     * }
     */
    public static float D50_Y0() {
        return D50_Y0;
    }
    private static final float D50_Z0 = 82.46800231933594f;
    /**
     * {@snippet lang=c :
     * #define D50_Z0 82.46800231933594
     * }
     */
    public static float D50_Z0() {
        return D50_Z0;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/var/tmp/"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = tiffio_h.LIBRARY_ARENA.allocateFrom("/var/tmp/");
        }
        return Holder.P_tmpdir;
    }
    private static final int TIFF_ANY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TIFF_ANY 0
     * }
     */
    public static int TIFF_ANY() {
        return TIFF_ANY;
    }
    private static final int TIFF_VARIABLE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define TIFF_VARIABLE -1
     * }
     */
    public static int TIFF_VARIABLE() {
        return TIFF_VARIABLE;
    }
    private static final int TIFF_SPP = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define TIFF_SPP -2
     * }
     */
    public static int TIFF_SPP() {
        return TIFF_SPP;
    }
    private static final int TIFF_VARIABLE2 = (int)-3L;
    /**
     * {@snippet lang=c :
     * #define TIFF_VARIABLE2 -3
     * }
     */
    public static int TIFF_VARIABLE2() {
        return TIFF_VARIABLE2;
    }
    private static final double U_NEU = 0.210526316d;
    /**
     * {@snippet lang=c :
     * #define U_NEU 0.210526316
     * }
     */
    public static double U_NEU() {
        return U_NEU;
    }
    private static final double V_NEU = 0.473684211d;
    /**
     * {@snippet lang=c :
     * #define V_NEU 0.473684211
     * }
     */
    public static double V_NEU() {
        return V_NEU;
    }
    private static final double UVSCALE = 410.0d;
    /**
     * {@snippet lang=c :
     * #define UVSCALE 410.0
     * }
     */
    public static double UVSCALE() {
        return UVSCALE;
    }
}

