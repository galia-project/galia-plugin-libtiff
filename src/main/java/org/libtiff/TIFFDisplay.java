// Generated by jextract

package org.libtiff;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     float d_mat[3][3];
 *     float d_YCR;
 *     float d_YCG;
 *     float d_YCB;
 *     uint32_t d_Vrwr;
 *     uint32_t d_Vrwg;
 *     uint32_t d_Vrwb;
 *     float d_Y0R;
 *     float d_Y0G;
 *     float d_Y0B;
 *     float d_gammaR;
 *     float d_gammaG;
 *     float d_gammaB;
 * }
 * }
 */
public class TIFFDisplay {

    TIFFDisplay() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, tiffio_h.C_FLOAT)).withName("d_mat"),
        tiffio_h.C_FLOAT.withName("d_YCR"),
        tiffio_h.C_FLOAT.withName("d_YCG"),
        tiffio_h.C_FLOAT.withName("d_YCB"),
        tiffio_h.C_INT.withName("d_Vrwr"),
        tiffio_h.C_INT.withName("d_Vrwg"),
        tiffio_h.C_INT.withName("d_Vrwb"),
        tiffio_h.C_FLOAT.withName("d_Y0R"),
        tiffio_h.C_FLOAT.withName("d_Y0G"),
        tiffio_h.C_FLOAT.withName("d_Y0B"),
        tiffio_h.C_FLOAT.withName("d_gammaR"),
        tiffio_h.C_FLOAT.withName("d_gammaG"),
        tiffio_h.C_FLOAT.withName("d_gammaB")
    ).withName("$anon$141:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout d_mat$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("d_mat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static final SequenceLayout d_mat$layout() {
        return d_mat$LAYOUT;
    }

    private static final long d_mat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static final long d_mat$offset() {
        return d_mat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static MemorySegment d_mat(MemorySegment struct) {
        return struct.asSlice(d_mat$OFFSET, d_mat$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static void d_mat(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, d_mat$OFFSET, d_mat$LAYOUT.byteSize());
    }

    private static long[] d_mat$DIMS = { 3, 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static long[] d_mat$dimensions() {
        return d_mat$DIMS;
    }
    private static final VarHandle d_mat$ELEM_HANDLE = d_mat$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static float d_mat(MemorySegment struct, long index0, long index1) {
        return (float)d_mat$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float d_mat[3][3]
     * }
     */
    public static void d_mat(MemorySegment struct, long index0, long index1, float fieldValue) {
        d_mat$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final OfFloat d_YCR$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_YCR"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_YCR
     * }
     */
    public static final OfFloat d_YCR$layout() {
        return d_YCR$LAYOUT;
    }

    private static final long d_YCR$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_YCR
     * }
     */
    public static final long d_YCR$offset() {
        return d_YCR$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_YCR
     * }
     */
    public static float d_YCR(MemorySegment struct) {
        return struct.get(d_YCR$LAYOUT, d_YCR$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_YCR
     * }
     */
    public static void d_YCR(MemorySegment struct, float fieldValue) {
        struct.set(d_YCR$LAYOUT, d_YCR$OFFSET, fieldValue);
    }

    private static final OfFloat d_YCG$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_YCG"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_YCG
     * }
     */
    public static final OfFloat d_YCG$layout() {
        return d_YCG$LAYOUT;
    }

    private static final long d_YCG$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_YCG
     * }
     */
    public static final long d_YCG$offset() {
        return d_YCG$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_YCG
     * }
     */
    public static float d_YCG(MemorySegment struct) {
        return struct.get(d_YCG$LAYOUT, d_YCG$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_YCG
     * }
     */
    public static void d_YCG(MemorySegment struct, float fieldValue) {
        struct.set(d_YCG$LAYOUT, d_YCG$OFFSET, fieldValue);
    }

    private static final OfFloat d_YCB$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_YCB"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_YCB
     * }
     */
    public static final OfFloat d_YCB$layout() {
        return d_YCB$LAYOUT;
    }

    private static final long d_YCB$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_YCB
     * }
     */
    public static final long d_YCB$offset() {
        return d_YCB$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_YCB
     * }
     */
    public static float d_YCB(MemorySegment struct) {
        return struct.get(d_YCB$LAYOUT, d_YCB$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_YCB
     * }
     */
    public static void d_YCB(MemorySegment struct, float fieldValue) {
        struct.set(d_YCB$LAYOUT, d_YCB$OFFSET, fieldValue);
    }

    private static final OfInt d_Vrwr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("d_Vrwr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwr
     * }
     */
    public static final OfInt d_Vrwr$layout() {
        return d_Vrwr$LAYOUT;
    }

    private static final long d_Vrwr$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwr
     * }
     */
    public static final long d_Vrwr$offset() {
        return d_Vrwr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwr
     * }
     */
    public static int d_Vrwr(MemorySegment struct) {
        return struct.get(d_Vrwr$LAYOUT, d_Vrwr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwr
     * }
     */
    public static void d_Vrwr(MemorySegment struct, int fieldValue) {
        struct.set(d_Vrwr$LAYOUT, d_Vrwr$OFFSET, fieldValue);
    }

    private static final OfInt d_Vrwg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("d_Vrwg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwg
     * }
     */
    public static final OfInt d_Vrwg$layout() {
        return d_Vrwg$LAYOUT;
    }

    private static final long d_Vrwg$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwg
     * }
     */
    public static final long d_Vrwg$offset() {
        return d_Vrwg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwg
     * }
     */
    public static int d_Vrwg(MemorySegment struct) {
        return struct.get(d_Vrwg$LAYOUT, d_Vrwg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwg
     * }
     */
    public static void d_Vrwg(MemorySegment struct, int fieldValue) {
        struct.set(d_Vrwg$LAYOUT, d_Vrwg$OFFSET, fieldValue);
    }

    private static final OfInt d_Vrwb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("d_Vrwb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwb
     * }
     */
    public static final OfInt d_Vrwb$layout() {
        return d_Vrwb$LAYOUT;
    }

    private static final long d_Vrwb$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwb
     * }
     */
    public static final long d_Vrwb$offset() {
        return d_Vrwb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwb
     * }
     */
    public static int d_Vrwb(MemorySegment struct) {
        return struct.get(d_Vrwb$LAYOUT, d_Vrwb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t d_Vrwb
     * }
     */
    public static void d_Vrwb(MemorySegment struct, int fieldValue) {
        struct.set(d_Vrwb$LAYOUT, d_Vrwb$OFFSET, fieldValue);
    }

    private static final OfFloat d_Y0R$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_Y0R"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_Y0R
     * }
     */
    public static final OfFloat d_Y0R$layout() {
        return d_Y0R$LAYOUT;
    }

    private static final long d_Y0R$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_Y0R
     * }
     */
    public static final long d_Y0R$offset() {
        return d_Y0R$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_Y0R
     * }
     */
    public static float d_Y0R(MemorySegment struct) {
        return struct.get(d_Y0R$LAYOUT, d_Y0R$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_Y0R
     * }
     */
    public static void d_Y0R(MemorySegment struct, float fieldValue) {
        struct.set(d_Y0R$LAYOUT, d_Y0R$OFFSET, fieldValue);
    }

    private static final OfFloat d_Y0G$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_Y0G"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_Y0G
     * }
     */
    public static final OfFloat d_Y0G$layout() {
        return d_Y0G$LAYOUT;
    }

    private static final long d_Y0G$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_Y0G
     * }
     */
    public static final long d_Y0G$offset() {
        return d_Y0G$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_Y0G
     * }
     */
    public static float d_Y0G(MemorySegment struct) {
        return struct.get(d_Y0G$LAYOUT, d_Y0G$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_Y0G
     * }
     */
    public static void d_Y0G(MemorySegment struct, float fieldValue) {
        struct.set(d_Y0G$LAYOUT, d_Y0G$OFFSET, fieldValue);
    }

    private static final OfFloat d_Y0B$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_Y0B"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_Y0B
     * }
     */
    public static final OfFloat d_Y0B$layout() {
        return d_Y0B$LAYOUT;
    }

    private static final long d_Y0B$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_Y0B
     * }
     */
    public static final long d_Y0B$offset() {
        return d_Y0B$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_Y0B
     * }
     */
    public static float d_Y0B(MemorySegment struct) {
        return struct.get(d_Y0B$LAYOUT, d_Y0B$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_Y0B
     * }
     */
    public static void d_Y0B(MemorySegment struct, float fieldValue) {
        struct.set(d_Y0B$LAYOUT, d_Y0B$OFFSET, fieldValue);
    }

    private static final OfFloat d_gammaR$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_gammaR"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_gammaR
     * }
     */
    public static final OfFloat d_gammaR$layout() {
        return d_gammaR$LAYOUT;
    }

    private static final long d_gammaR$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_gammaR
     * }
     */
    public static final long d_gammaR$offset() {
        return d_gammaR$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_gammaR
     * }
     */
    public static float d_gammaR(MemorySegment struct) {
        return struct.get(d_gammaR$LAYOUT, d_gammaR$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_gammaR
     * }
     */
    public static void d_gammaR(MemorySegment struct, float fieldValue) {
        struct.set(d_gammaR$LAYOUT, d_gammaR$OFFSET, fieldValue);
    }

    private static final OfFloat d_gammaG$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_gammaG"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_gammaG
     * }
     */
    public static final OfFloat d_gammaG$layout() {
        return d_gammaG$LAYOUT;
    }

    private static final long d_gammaG$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_gammaG
     * }
     */
    public static final long d_gammaG$offset() {
        return d_gammaG$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_gammaG
     * }
     */
    public static float d_gammaG(MemorySegment struct) {
        return struct.get(d_gammaG$LAYOUT, d_gammaG$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_gammaG
     * }
     */
    public static void d_gammaG(MemorySegment struct, float fieldValue) {
        struct.set(d_gammaG$LAYOUT, d_gammaG$OFFSET, fieldValue);
    }

    private static final OfFloat d_gammaB$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("d_gammaB"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float d_gammaB
     * }
     */
    public static final OfFloat d_gammaB$layout() {
        return d_gammaB$LAYOUT;
    }

    private static final long d_gammaB$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float d_gammaB
     * }
     */
    public static final long d_gammaB$offset() {
        return d_gammaB$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float d_gammaB
     * }
     */
    public static float d_gammaB(MemorySegment struct) {
        return struct.get(d_gammaB$LAYOUT, d_gammaB$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float d_gammaB
     * }
     */
    public static void d_gammaB(MemorySegment struct, float fieldValue) {
        struct.set(d_gammaB$LAYOUT, d_gammaB$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

