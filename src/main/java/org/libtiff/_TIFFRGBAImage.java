// Generated by jextract

package org.libtiff;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TIFFRGBAImage {
 *     TIFF *tif;
 *     int stoponerr;
 *     int isContig;
 *     int alpha;
 *     uint32_t width;
 *     uint32_t height;
 *     uint16_t bitspersample;
 *     uint16_t samplesperpixel;
 *     uint16_t orientation;
 *     uint16_t req_orientation;
 *     uint16_t photometric;
 *     uint16_t *redcmap;
 *     uint16_t *greencmap;
 *     uint16_t *bluecmap;
 *     int (*get)(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t);
 *     union {
 *         void (*any)(TIFFRGBAImage *);
 *         tileContigRoutine contig;
 *         tileSeparateRoutine separate;
 *     } put;
 *     TIFFRGBValue *Map;
 *     uint32_t **BWmap;
 *     uint32_t **PALmap;
 *     TIFFYCbCrToRGB *ycbcr;
 *     TIFFCIELabToRGB *cielab;
 *     uint8_t *UaToAa;
 *     uint8_t *Bitdepth16To8;
 *     int row_offset;
 *     int col_offset;
 * }
 * }
 */
public class _TIFFRGBAImage {

    _TIFFRGBAImage() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tiffio_h.C_POINTER.withName("tif"),
        tiffio_h.C_INT.withName("stoponerr"),
        tiffio_h.C_INT.withName("isContig"),
        tiffio_h.C_INT.withName("alpha"),
        tiffio_h.C_INT.withName("width"),
        tiffio_h.C_INT.withName("height"),
        tiffio_h.C_SHORT.withName("bitspersample"),
        tiffio_h.C_SHORT.withName("samplesperpixel"),
        tiffio_h.C_SHORT.withName("orientation"),
        tiffio_h.C_SHORT.withName("req_orientation"),
        tiffio_h.C_SHORT.withName("photometric"),
        MemoryLayout.paddingLayout(2),
        tiffio_h.C_POINTER.withName("redcmap"),
        tiffio_h.C_POINTER.withName("greencmap"),
        tiffio_h.C_POINTER.withName("bluecmap"),
        tiffio_h.C_POINTER.withName("get"),
        _TIFFRGBAImage.put.layout().withName("put"),
        tiffio_h.C_POINTER.withName("Map"),
        tiffio_h.C_POINTER.withName("BWmap"),
        tiffio_h.C_POINTER.withName("PALmap"),
        tiffio_h.C_POINTER.withName("ycbcr"),
        tiffio_h.C_POINTER.withName("cielab"),
        tiffio_h.C_POINTER.withName("UaToAa"),
        tiffio_h.C_POINTER.withName("Bitdepth16To8"),
        tiffio_h.C_INT.withName("row_offset"),
        tiffio_h.C_INT.withName("col_offset")
    ).withName("_TIFFRGBAImage");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout tif$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tif"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TIFF *tif
     * }
     */
    public static final AddressLayout tif$layout() {
        return tif$LAYOUT;
    }

    private static final long tif$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TIFF *tif
     * }
     */
    public static final long tif$offset() {
        return tif$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TIFF *tif
     * }
     */
    public static MemorySegment tif(MemorySegment struct) {
        return struct.get(tif$LAYOUT, tif$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TIFF *tif
     * }
     */
    public static void tif(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tif$LAYOUT, tif$OFFSET, fieldValue);
    }

    private static final OfInt stoponerr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stoponerr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int stoponerr
     * }
     */
    public static final OfInt stoponerr$layout() {
        return stoponerr$LAYOUT;
    }

    private static final long stoponerr$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int stoponerr
     * }
     */
    public static final long stoponerr$offset() {
        return stoponerr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int stoponerr
     * }
     */
    public static int stoponerr(MemorySegment struct) {
        return struct.get(stoponerr$LAYOUT, stoponerr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int stoponerr
     * }
     */
    public static void stoponerr(MemorySegment struct, int fieldValue) {
        struct.set(stoponerr$LAYOUT, stoponerr$OFFSET, fieldValue);
    }

    private static final OfInt isContig$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isContig"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int isContig
     * }
     */
    public static final OfInt isContig$layout() {
        return isContig$LAYOUT;
    }

    private static final long isContig$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int isContig
     * }
     */
    public static final long isContig$offset() {
        return isContig$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int isContig
     * }
     */
    public static int isContig(MemorySegment struct) {
        return struct.get(isContig$LAYOUT, isContig$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int isContig
     * }
     */
    public static void isContig(MemorySegment struct, int fieldValue) {
        struct.set(isContig$LAYOUT, isContig$OFFSET, fieldValue);
    }

    private static final OfInt alpha$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alpha
     * }
     */
    public static final OfInt alpha$layout() {
        return alpha$LAYOUT;
    }

    private static final long alpha$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alpha
     * }
     */
    public static final long alpha$offset() {
        return alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alpha
     * }
     */
    public static int alpha(MemorySegment struct) {
        return struct.get(alpha$LAYOUT, alpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alpha
     * }
     */
    public static void alpha(MemorySegment struct, int fieldValue) {
        struct.set(alpha$LAYOUT, alpha$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfShort bitspersample$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bitspersample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t bitspersample
     * }
     */
    public static final OfShort bitspersample$layout() {
        return bitspersample$LAYOUT;
    }

    private static final long bitspersample$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t bitspersample
     * }
     */
    public static final long bitspersample$offset() {
        return bitspersample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t bitspersample
     * }
     */
    public static short bitspersample(MemorySegment struct) {
        return struct.get(bitspersample$LAYOUT, bitspersample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t bitspersample
     * }
     */
    public static void bitspersample(MemorySegment struct, short fieldValue) {
        struct.set(bitspersample$LAYOUT, bitspersample$OFFSET, fieldValue);
    }

    private static final OfShort samplesperpixel$LAYOUT = (OfShort)$LAYOUT.select(groupElement("samplesperpixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t samplesperpixel
     * }
     */
    public static final OfShort samplesperpixel$layout() {
        return samplesperpixel$LAYOUT;
    }

    private static final long samplesperpixel$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t samplesperpixel
     * }
     */
    public static final long samplesperpixel$offset() {
        return samplesperpixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t samplesperpixel
     * }
     */
    public static short samplesperpixel(MemorySegment struct) {
        return struct.get(samplesperpixel$LAYOUT, samplesperpixel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t samplesperpixel
     * }
     */
    public static void samplesperpixel(MemorySegment struct, short fieldValue) {
        struct.set(samplesperpixel$LAYOUT, samplesperpixel$OFFSET, fieldValue);
    }

    private static final OfShort orientation$LAYOUT = (OfShort)$LAYOUT.select(groupElement("orientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t orientation
     * }
     */
    public static final OfShort orientation$layout() {
        return orientation$LAYOUT;
    }

    private static final long orientation$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t orientation
     * }
     */
    public static final long orientation$offset() {
        return orientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t orientation
     * }
     */
    public static short orientation(MemorySegment struct) {
        return struct.get(orientation$LAYOUT, orientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t orientation
     * }
     */
    public static void orientation(MemorySegment struct, short fieldValue) {
        struct.set(orientation$LAYOUT, orientation$OFFSET, fieldValue);
    }

    private static final OfShort req_orientation$LAYOUT = (OfShort)$LAYOUT.select(groupElement("req_orientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t req_orientation
     * }
     */
    public static final OfShort req_orientation$layout() {
        return req_orientation$LAYOUT;
    }

    private static final long req_orientation$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t req_orientation
     * }
     */
    public static final long req_orientation$offset() {
        return req_orientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t req_orientation
     * }
     */
    public static short req_orientation(MemorySegment struct) {
        return struct.get(req_orientation$LAYOUT, req_orientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t req_orientation
     * }
     */
    public static void req_orientation(MemorySegment struct, short fieldValue) {
        struct.set(req_orientation$LAYOUT, req_orientation$OFFSET, fieldValue);
    }

    private static final OfShort photometric$LAYOUT = (OfShort)$LAYOUT.select(groupElement("photometric"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t photometric
     * }
     */
    public static final OfShort photometric$layout() {
        return photometric$LAYOUT;
    }

    private static final long photometric$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t photometric
     * }
     */
    public static final long photometric$offset() {
        return photometric$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t photometric
     * }
     */
    public static short photometric(MemorySegment struct) {
        return struct.get(photometric$LAYOUT, photometric$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t photometric
     * }
     */
    public static void photometric(MemorySegment struct, short fieldValue) {
        struct.set(photometric$LAYOUT, photometric$OFFSET, fieldValue);
    }

    private static final AddressLayout redcmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("redcmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t *redcmap
     * }
     */
    public static final AddressLayout redcmap$layout() {
        return redcmap$LAYOUT;
    }

    private static final long redcmap$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t *redcmap
     * }
     */
    public static final long redcmap$offset() {
        return redcmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t *redcmap
     * }
     */
    public static MemorySegment redcmap(MemorySegment struct) {
        return struct.get(redcmap$LAYOUT, redcmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t *redcmap
     * }
     */
    public static void redcmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(redcmap$LAYOUT, redcmap$OFFSET, fieldValue);
    }

    private static final AddressLayout greencmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("greencmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t *greencmap
     * }
     */
    public static final AddressLayout greencmap$layout() {
        return greencmap$LAYOUT;
    }

    private static final long greencmap$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t *greencmap
     * }
     */
    public static final long greencmap$offset() {
        return greencmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t *greencmap
     * }
     */
    public static MemorySegment greencmap(MemorySegment struct) {
        return struct.get(greencmap$LAYOUT, greencmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t *greencmap
     * }
     */
    public static void greencmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(greencmap$LAYOUT, greencmap$OFFSET, fieldValue);
    }

    private static final AddressLayout bluecmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bluecmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t *bluecmap
     * }
     */
    public static final AddressLayout bluecmap$layout() {
        return bluecmap$LAYOUT;
    }

    private static final long bluecmap$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t *bluecmap
     * }
     */
    public static final long bluecmap$offset() {
        return bluecmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t *bluecmap
     * }
     */
    public static MemorySegment bluecmap(MemorySegment struct) {
        return struct.get(bluecmap$LAYOUT, bluecmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t *bluecmap
     * }
     */
    public static void bluecmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bluecmap$LAYOUT, bluecmap$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*get)(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static class get {

        get() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            tiffio_h.C_INT,
            tiffio_h.C_POINTER,
            tiffio_h.C_POINTER,
            tiffio_h.C_INT,
            tiffio_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = tiffio_h.upcallHandle(get.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*get)(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static final AddressLayout get$layout() {
        return get$LAYOUT;
    }

    private static final long get$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*get)(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static final long get$offset() {
        return get$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*get)(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static MemorySegment get(MemorySegment struct) {
        return struct.get(get$LAYOUT, get$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*get)(TIFFRGBAImage *, uint32_t *, uint32_t, uint32_t)
     * }
     */
    public static void get(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get$LAYOUT, get$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     void (*any)(TIFFRGBAImage *);
     *     tileContigRoutine contig;
     *     tileSeparateRoutine separate;
     * }
     * }
     */
    public static class put {

        put() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            tiffio_h.C_POINTER.withName("any"),
            tiffio_h.C_POINTER.withName("contig"),
            tiffio_h.C_POINTER.withName("separate")
        ).withName("$anon$223:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * void (*any)(TIFFRGBAImage *)
         * }
         */
        public static class any {

            any() {
                // Should not be called directly
            }

            /**
             * The function pointer signature, expressed as a functional interface
             */
            public interface Function {
                void apply(MemorySegment _x0);
            }

            private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                tiffio_h.C_POINTER
            );

            /**
             * The descriptor of this function pointer
             */
            public static FunctionDescriptor descriptor() {
                return $DESC;
            }

            private static final MethodHandle UP$MH = tiffio_h.upcallHandle(any.Function.class, "apply", $DESC);

            /**
             * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
             * The lifetime of the returned segment is managed by {@code arena}
             */
            public static MemorySegment allocate(any.Function fi, Arena arena) {
                return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
            }

            private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

            /**
             * Invoke the upcall stub {@code funcPtr}, with given parameters
             */
            public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
                try {
                     DOWN$MH.invokeExact(funcPtr, _x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            }
        }

        private static final AddressLayout any$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("any"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void (*any)(TIFFRGBAImage *)
         * }
         */
        public static final AddressLayout any$layout() {
            return any$LAYOUT;
        }

        private static final long any$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void (*any)(TIFFRGBAImage *)
         * }
         */
        public static final long any$offset() {
            return any$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void (*any)(TIFFRGBAImage *)
         * }
         */
        public static MemorySegment any(MemorySegment union) {
            return union.get(any$LAYOUT, any$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void (*any)(TIFFRGBAImage *)
         * }
         */
        public static void any(MemorySegment union, MemorySegment fieldValue) {
            union.set(any$LAYOUT, any$OFFSET, fieldValue);
        }

        private static final AddressLayout contig$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("contig"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * tileContigRoutine contig
         * }
         */
        public static final AddressLayout contig$layout() {
            return contig$LAYOUT;
        }

        private static final long contig$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * tileContigRoutine contig
         * }
         */
        public static final long contig$offset() {
            return contig$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * tileContigRoutine contig
         * }
         */
        public static MemorySegment contig(MemorySegment union) {
            return union.get(contig$LAYOUT, contig$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * tileContigRoutine contig
         * }
         */
        public static void contig(MemorySegment union, MemorySegment fieldValue) {
            union.set(contig$LAYOUT, contig$OFFSET, fieldValue);
        }

        private static final AddressLayout separate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("separate"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * tileSeparateRoutine separate
         * }
         */
        public static final AddressLayout separate$layout() {
            return separate$LAYOUT;
        }

        private static final long separate$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * tileSeparateRoutine separate
         * }
         */
        public static final long separate$offset() {
            return separate$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * tileSeparateRoutine separate
         * }
         */
        public static MemorySegment separate(MemorySegment union) {
            return union.get(separate$LAYOUT, separate$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * tileSeparateRoutine separate
         * }
         */
        public static void separate(MemorySegment union, MemorySegment fieldValue) {
            union.set(separate$LAYOUT, separate$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout put$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("put"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     void (*any)(TIFFRGBAImage *);
     *     tileContigRoutine contig;
     *     tileSeparateRoutine separate;
     * } put
     * }
     */
    public static final GroupLayout put$layout() {
        return put$LAYOUT;
    }

    private static final long put$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     void (*any)(TIFFRGBAImage *);
     *     tileContigRoutine contig;
     *     tileSeparateRoutine separate;
     * } put
     * }
     */
    public static final long put$offset() {
        return put$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     void (*any)(TIFFRGBAImage *);
     *     tileContigRoutine contig;
     *     tileSeparateRoutine separate;
     * } put
     * }
     */
    public static MemorySegment put(MemorySegment struct) {
        return struct.asSlice(put$OFFSET, put$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     void (*any)(TIFFRGBAImage *);
     *     tileContigRoutine contig;
     *     tileSeparateRoutine separate;
     * } put
     * }
     */
    public static void put(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, put$OFFSET, put$LAYOUT.byteSize());
    }

    private static final AddressLayout Map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TIFFRGBValue *Map
     * }
     */
    public static final AddressLayout Map$layout() {
        return Map$LAYOUT;
    }

    private static final long Map$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TIFFRGBValue *Map
     * }
     */
    public static final long Map$offset() {
        return Map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TIFFRGBValue *Map
     * }
     */
    public static MemorySegment Map(MemorySegment struct) {
        return struct.get(Map$LAYOUT, Map$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TIFFRGBValue *Map
     * }
     */
    public static void Map(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Map$LAYOUT, Map$OFFSET, fieldValue);
    }

    private static final AddressLayout BWmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BWmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t **BWmap
     * }
     */
    public static final AddressLayout BWmap$layout() {
        return BWmap$LAYOUT;
    }

    private static final long BWmap$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t **BWmap
     * }
     */
    public static final long BWmap$offset() {
        return BWmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t **BWmap
     * }
     */
    public static MemorySegment BWmap(MemorySegment struct) {
        return struct.get(BWmap$LAYOUT, BWmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t **BWmap
     * }
     */
    public static void BWmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BWmap$LAYOUT, BWmap$OFFSET, fieldValue);
    }

    private static final AddressLayout PALmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PALmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t **PALmap
     * }
     */
    public static final AddressLayout PALmap$layout() {
        return PALmap$LAYOUT;
    }

    private static final long PALmap$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t **PALmap
     * }
     */
    public static final long PALmap$offset() {
        return PALmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t **PALmap
     * }
     */
    public static MemorySegment PALmap(MemorySegment struct) {
        return struct.get(PALmap$LAYOUT, PALmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t **PALmap
     * }
     */
    public static void PALmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PALmap$LAYOUT, PALmap$OFFSET, fieldValue);
    }

    private static final AddressLayout ycbcr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ycbcr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TIFFYCbCrToRGB *ycbcr
     * }
     */
    public static final AddressLayout ycbcr$layout() {
        return ycbcr$LAYOUT;
    }

    private static final long ycbcr$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TIFFYCbCrToRGB *ycbcr
     * }
     */
    public static final long ycbcr$offset() {
        return ycbcr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TIFFYCbCrToRGB *ycbcr
     * }
     */
    public static MemorySegment ycbcr(MemorySegment struct) {
        return struct.get(ycbcr$LAYOUT, ycbcr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TIFFYCbCrToRGB *ycbcr
     * }
     */
    public static void ycbcr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ycbcr$LAYOUT, ycbcr$OFFSET, fieldValue);
    }

    private static final AddressLayout cielab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cielab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TIFFCIELabToRGB *cielab
     * }
     */
    public static final AddressLayout cielab$layout() {
        return cielab$LAYOUT;
    }

    private static final long cielab$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TIFFCIELabToRGB *cielab
     * }
     */
    public static final long cielab$offset() {
        return cielab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TIFFCIELabToRGB *cielab
     * }
     */
    public static MemorySegment cielab(MemorySegment struct) {
        return struct.get(cielab$LAYOUT, cielab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TIFFCIELabToRGB *cielab
     * }
     */
    public static void cielab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cielab$LAYOUT, cielab$OFFSET, fieldValue);
    }

    private static final AddressLayout UaToAa$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UaToAa"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *UaToAa
     * }
     */
    public static final AddressLayout UaToAa$layout() {
        return UaToAa$LAYOUT;
    }

    private static final long UaToAa$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *UaToAa
     * }
     */
    public static final long UaToAa$offset() {
        return UaToAa$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *UaToAa
     * }
     */
    public static MemorySegment UaToAa(MemorySegment struct) {
        return struct.get(UaToAa$LAYOUT, UaToAa$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *UaToAa
     * }
     */
    public static void UaToAa(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UaToAa$LAYOUT, UaToAa$OFFSET, fieldValue);
    }

    private static final AddressLayout Bitdepth16To8$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Bitdepth16To8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *Bitdepth16To8
     * }
     */
    public static final AddressLayout Bitdepth16To8$layout() {
        return Bitdepth16To8$LAYOUT;
    }

    private static final long Bitdepth16To8$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *Bitdepth16To8
     * }
     */
    public static final long Bitdepth16To8$offset() {
        return Bitdepth16To8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *Bitdepth16To8
     * }
     */
    public static MemorySegment Bitdepth16To8(MemorySegment struct) {
        return struct.get(Bitdepth16To8$LAYOUT, Bitdepth16To8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *Bitdepth16To8
     * }
     */
    public static void Bitdepth16To8(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Bitdepth16To8$LAYOUT, Bitdepth16To8$OFFSET, fieldValue);
    }

    private static final OfInt row_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("row_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int row_offset
     * }
     */
    public static final OfInt row_offset$layout() {
        return row_offset$LAYOUT;
    }

    private static final long row_offset$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int row_offset
     * }
     */
    public static final long row_offset$offset() {
        return row_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int row_offset
     * }
     */
    public static int row_offset(MemorySegment struct) {
        return struct.get(row_offset$LAYOUT, row_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int row_offset
     * }
     */
    public static void row_offset(MemorySegment struct, int fieldValue) {
        struct.set(row_offset$LAYOUT, row_offset$OFFSET, fieldValue);
    }

    private static final OfInt col_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("col_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int col_offset
     * }
     */
    public static final OfInt col_offset$layout() {
        return col_offset$LAYOUT;
    }

    private static final long col_offset$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int col_offset
     * }
     */
    public static final long col_offset$offset() {
        return col_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int col_offset
     * }
     */
    public static int col_offset(MemorySegment struct) {
        return struct.get(col_offset$LAYOUT, col_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int col_offset
     * }
     */
    public static void col_offset(MemorySegment struct, int fieldValue) {
        struct.set(col_offset$LAYOUT, col_offset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

