// Generated by jextract

package org.libtiff;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint16_t tiff_magic;
 *     uint16_t tiff_version;
 *     uint16_t tiff_offsetsize;
 *     uint16_t tiff_unused;
 *     uint64_t tiff_diroff;
 * }
 * }
 */
public class TIFFHeaderBig {

    TIFFHeaderBig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tiffio_h.C_SHORT.withName("tiff_magic"),
        tiffio_h.C_SHORT.withName("tiff_version"),
        tiffio_h.C_SHORT.withName("tiff_offsetsize"),
        tiffio_h.C_SHORT.withName("tiff_unused"),
        tiffio_h.C_LONG_LONG.withName("tiff_diroff")
    ).withName("$anon$116:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort tiff_magic$LAYOUT = (OfShort)$LAYOUT.select(groupElement("tiff_magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t tiff_magic
     * }
     */
    public static final OfShort tiff_magic$layout() {
        return tiff_magic$LAYOUT;
    }

    private static final long tiff_magic$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t tiff_magic
     * }
     */
    public static final long tiff_magic$offset() {
        return tiff_magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t tiff_magic
     * }
     */
    public static short tiff_magic(MemorySegment struct) {
        return struct.get(tiff_magic$LAYOUT, tiff_magic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t tiff_magic
     * }
     */
    public static void tiff_magic(MemorySegment struct, short fieldValue) {
        struct.set(tiff_magic$LAYOUT, tiff_magic$OFFSET, fieldValue);
    }

    private static final OfShort tiff_version$LAYOUT = (OfShort)$LAYOUT.select(groupElement("tiff_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t tiff_version
     * }
     */
    public static final OfShort tiff_version$layout() {
        return tiff_version$LAYOUT;
    }

    private static final long tiff_version$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t tiff_version
     * }
     */
    public static final long tiff_version$offset() {
        return tiff_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t tiff_version
     * }
     */
    public static short tiff_version(MemorySegment struct) {
        return struct.get(tiff_version$LAYOUT, tiff_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t tiff_version
     * }
     */
    public static void tiff_version(MemorySegment struct, short fieldValue) {
        struct.set(tiff_version$LAYOUT, tiff_version$OFFSET, fieldValue);
    }

    private static final OfShort tiff_offsetsize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("tiff_offsetsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t tiff_offsetsize
     * }
     */
    public static final OfShort tiff_offsetsize$layout() {
        return tiff_offsetsize$LAYOUT;
    }

    private static final long tiff_offsetsize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t tiff_offsetsize
     * }
     */
    public static final long tiff_offsetsize$offset() {
        return tiff_offsetsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t tiff_offsetsize
     * }
     */
    public static short tiff_offsetsize(MemorySegment struct) {
        return struct.get(tiff_offsetsize$LAYOUT, tiff_offsetsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t tiff_offsetsize
     * }
     */
    public static void tiff_offsetsize(MemorySegment struct, short fieldValue) {
        struct.set(tiff_offsetsize$LAYOUT, tiff_offsetsize$OFFSET, fieldValue);
    }

    private static final OfShort tiff_unused$LAYOUT = (OfShort)$LAYOUT.select(groupElement("tiff_unused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t tiff_unused
     * }
     */
    public static final OfShort tiff_unused$layout() {
        return tiff_unused$LAYOUT;
    }

    private static final long tiff_unused$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t tiff_unused
     * }
     */
    public static final long tiff_unused$offset() {
        return tiff_unused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t tiff_unused
     * }
     */
    public static short tiff_unused(MemorySegment struct) {
        return struct.get(tiff_unused$LAYOUT, tiff_unused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t tiff_unused
     * }
     */
    public static void tiff_unused(MemorySegment struct, short fieldValue) {
        struct.set(tiff_unused$LAYOUT, tiff_unused$OFFSET, fieldValue);
    }

    private static final OfLong tiff_diroff$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tiff_diroff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t tiff_diroff
     * }
     */
    public static final OfLong tiff_diroff$layout() {
        return tiff_diroff$LAYOUT;
    }

    private static final long tiff_diroff$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t tiff_diroff
     * }
     */
    public static final long tiff_diroff$offset() {
        return tiff_diroff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t tiff_diroff
     * }
     */
    public static long tiff_diroff(MemorySegment struct) {
        return struct.get(tiff_diroff$LAYOUT, tiff_diroff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t tiff_diroff
     * }
     */
    public static void tiff_diroff(MemorySegment struct, long fieldValue) {
        struct.set(tiff_diroff$LAYOUT, tiff_diroff$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

