// Generated by jextract

package org.libtiff;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     TIFFRGBValue *clamptab;
 *     int *Cr_r_tab;
 *     int *Cb_b_tab;
 *     int32_t *Cr_g_tab;
 *     int32_t *Cb_g_tab;
 *     int32_t *Y_tab;
 * }
 * }
 */
public class TIFFYCbCrToRGB {

    TIFFYCbCrToRGB() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tiffio_h.C_POINTER.withName("clamptab"),
        tiffio_h.C_POINTER.withName("Cr_r_tab"),
        tiffio_h.C_POINTER.withName("Cb_b_tab"),
        tiffio_h.C_POINTER.withName("Cr_g_tab"),
        tiffio_h.C_POINTER.withName("Cb_g_tab"),
        tiffio_h.C_POINTER.withName("Y_tab")
    ).withName("$anon$158:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout clamptab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clamptab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TIFFRGBValue *clamptab
     * }
     */
    public static final AddressLayout clamptab$layout() {
        return clamptab$LAYOUT;
    }

    private static final long clamptab$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TIFFRGBValue *clamptab
     * }
     */
    public static final long clamptab$offset() {
        return clamptab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TIFFRGBValue *clamptab
     * }
     */
    public static MemorySegment clamptab(MemorySegment struct) {
        return struct.get(clamptab$LAYOUT, clamptab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TIFFRGBValue *clamptab
     * }
     */
    public static void clamptab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clamptab$LAYOUT, clamptab$OFFSET, fieldValue);
    }

    private static final AddressLayout Cr_r_tab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Cr_r_tab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *Cr_r_tab
     * }
     */
    public static final AddressLayout Cr_r_tab$layout() {
        return Cr_r_tab$LAYOUT;
    }

    private static final long Cr_r_tab$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *Cr_r_tab
     * }
     */
    public static final long Cr_r_tab$offset() {
        return Cr_r_tab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *Cr_r_tab
     * }
     */
    public static MemorySegment Cr_r_tab(MemorySegment struct) {
        return struct.get(Cr_r_tab$LAYOUT, Cr_r_tab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *Cr_r_tab
     * }
     */
    public static void Cr_r_tab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Cr_r_tab$LAYOUT, Cr_r_tab$OFFSET, fieldValue);
    }

    private static final AddressLayout Cb_b_tab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Cb_b_tab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *Cb_b_tab
     * }
     */
    public static final AddressLayout Cb_b_tab$layout() {
        return Cb_b_tab$LAYOUT;
    }

    private static final long Cb_b_tab$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *Cb_b_tab
     * }
     */
    public static final long Cb_b_tab$offset() {
        return Cb_b_tab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *Cb_b_tab
     * }
     */
    public static MemorySegment Cb_b_tab(MemorySegment struct) {
        return struct.get(Cb_b_tab$LAYOUT, Cb_b_tab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *Cb_b_tab
     * }
     */
    public static void Cb_b_tab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Cb_b_tab$LAYOUT, Cb_b_tab$OFFSET, fieldValue);
    }

    private static final AddressLayout Cr_g_tab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Cr_g_tab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t *Cr_g_tab
     * }
     */
    public static final AddressLayout Cr_g_tab$layout() {
        return Cr_g_tab$LAYOUT;
    }

    private static final long Cr_g_tab$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t *Cr_g_tab
     * }
     */
    public static final long Cr_g_tab$offset() {
        return Cr_g_tab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t *Cr_g_tab
     * }
     */
    public static MemorySegment Cr_g_tab(MemorySegment struct) {
        return struct.get(Cr_g_tab$LAYOUT, Cr_g_tab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t *Cr_g_tab
     * }
     */
    public static void Cr_g_tab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Cr_g_tab$LAYOUT, Cr_g_tab$OFFSET, fieldValue);
    }

    private static final AddressLayout Cb_g_tab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Cb_g_tab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t *Cb_g_tab
     * }
     */
    public static final AddressLayout Cb_g_tab$layout() {
        return Cb_g_tab$LAYOUT;
    }

    private static final long Cb_g_tab$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t *Cb_g_tab
     * }
     */
    public static final long Cb_g_tab$offset() {
        return Cb_g_tab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t *Cb_g_tab
     * }
     */
    public static MemorySegment Cb_g_tab(MemorySegment struct) {
        return struct.get(Cb_g_tab$LAYOUT, Cb_g_tab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t *Cb_g_tab
     * }
     */
    public static void Cb_g_tab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Cb_g_tab$LAYOUT, Cb_g_tab$OFFSET, fieldValue);
    }

    private static final AddressLayout Y_tab$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Y_tab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t *Y_tab
     * }
     */
    public static final AddressLayout Y_tab$layout() {
        return Y_tab$LAYOUT;
    }

    private static final long Y_tab$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t *Y_tab
     * }
     */
    public static final long Y_tab$offset() {
        return Y_tab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t *Y_tab
     * }
     */
    public static MemorySegment Y_tab(MemorySegment struct) {
        return struct.get(Y_tab$LAYOUT, Y_tab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t *Y_tab
     * }
     */
    public static void Y_tab(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Y_tab$LAYOUT, Y_tab$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

